{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/hackaton/ITFest-MTS/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [patientData, setPatientData] = useState({\n    address: \"\",\n    info: \"\"\n  });\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n    try {\n      var _config$network$chain, _config$network$chain2;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      console.log(\"üîë Conectat cu adresa:\", account);\n      setAccount(account);\n      setProvider(provider);\n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = ethers.utils.getAddress(accounts[0]);\n        setAccount(account);\n      });\n      const organNFTAddress = (_config$network$chain = config[network.chainId]) === null || _config$network$chain === void 0 ? void 0 : (_config$network$chain2 = _config$network$chain.organNFT) === null || _config$network$chain2 === void 0 ? void 0 : _config$network$chain2.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n      const escrow = new ethers.Contract(config[network.chainId].escrow.address, OrganEscrow, provider);\n      const patientRegistry = new ethers.Contract(config[network.chainId].patientRegistry.address, PatientRegistry, provider);\n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n      console.log(\"üìú Contracte ini»õializate!\");\n\n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n      setOrgans(fetchedOrgans);\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n\n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n      const patientDataPromises = patientList.map(async address => {\n        const patient = await patientRegistry.patients(address);\n        return {\n          address: address,\n          info: patient.patientInfo\n        };\n      });\n      const allPatientData = await Promise.all(patientDataPromises);\n      console.log(\"All Patient Data:\", allPatientData);\n      return allPatientData;\n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  const fetchDonorAddress = async organNFT => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  const handleChange = e => {\n    setPatientData({\n      ...patientData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const addPatientHandler = async e => {\n    e.preventDefault();\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    const doctorAddress = await patientRegistry.doctor();\n    if (account !== doctorAddress) {\n      alert(\"Only the doctor can add patients.\");\n      return;\n    }\n    if (!ethers.utils.isAddress(patientData.address)) {\n      alert(\"Invalid address.\");\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.addPatient(patientData.address, patientData.info);\n      await tx.wait();\n      alert(`Patient ${patientData.address} added successfully`);\n      setPatients(await patientRegistry.getPatientList());\n      setPatientData({\n        address: \"\",\n        info: \"\"\n      });\n    } catch (error) {\n      console.error(\"Error adding patient:\", error);\n      alert(\"Failed to add patient.\");\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const togglePop = home => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-7 flex flex-col gap-y-6 items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-4xl font-bold\",\n        children: \"Organs For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 208,\n        columnNumber: 3\n      }, this), account && organNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Donate an Organ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 214,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(AddOrgan, {\n          organNFT: organNFT,\n          provider: provider,\n          account: account,\n          donorAddress: donorAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 215,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 213,\n        columnNumber: 3\n      }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addPatientHandler,\n          className: \"bg-green-500 text-white p-2 rounded-md\",\n          children: \"Add Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 224,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 223,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Patients List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 239,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc mt-2\",\n          children: patients.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No patients added yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 242,\n            columnNumber: 9\n          }, this) : patients.map((patientAddress, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 246,\n              columnNumber: 13\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 245,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 240,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 238,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-7 flex flex-col gap-y-6 items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-4xl font-bold\",\n          children: \"Organs For You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center space-x-5 p-1\",\n          children: !organs.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 257,\n            columnNumber: 7\n          }, this) : organs.map((organ, index) => {\n            var _organ$attributes, _organ$attributes$fin;\n            return organ && organ.attributes ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rounded-lg shadow-xl\",\n              onClick: () => togglePop(organ),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: organ.image || \"fallback.jpg\",\n                  className: \"w-[350px] h-auto rounded-t-lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 263,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 262,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Organ:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 266,\n                    columnNumber: 18\n                  }, this), \" \", organ.organ || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 266,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Blood Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 267,\n                    columnNumber: 18\n                  }, this), \" \", organ.BloodType || ((_organ$attributes = organ.attributes) === null || _organ$attributes === void 0 ? void 0 : (_organ$attributes$fin = _organ$attributes.find(attr => attr.trait_type === \"Blood Type\")) === null || _organ$attributes$fin === void 0 ? void 0 : _organ$attributes$fin.value) || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 267,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Description:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 268,\n                    columnNumber: 18\n                  }, this), \" \", organ.description || \"No description\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 268,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"ID:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 269,\n                    columnNumber: 18\n                  }, this), \" \", organ.id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 269,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Attributes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    children: organ.attributes.map((attr, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [attr.trait_type, \": \", attr.value]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 276,\n                      columnNumber: 21\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 272,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 265,\n                columnNumber: 13\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 11\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }, this), toggle && /*#__PURE__*/_jsxDEV(Home, {\n      organ: organ,\n      provider: provider,\n      account: account,\n      escrow: escrow,\n      togglePop: togglePop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 292,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 203,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"Bj8D+Aeoeb9LbkHMSgJbDOrNJyI=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","logo","AddOrgan","uploadToPinata","OrganNFT","OrganEscrow","WaitingList","PatientRegistry","config","Navigation","Search","Home","jsxDEV","_jsxDEV","App","_s","account","setAccount","provider","setProvider","organNFT","setOrganNFT","waitingList","setWaitingList","escrow","setEscrow","organs","setOrgans","organ","setOrgan","toggle","setToggle","patientRegistry","setPatientRegistry","patients","setPatients","donorAddress","setDonorAddress","patientData","setPatientData","address","info","loadBlockchainData","console","log","window","ethereum","error","_config$network$chain","_config$network$chain2","providers","Web3Provider","send","signer","getSigner","getAddress","network","getNetwork","chainId","on","accounts","request","method","utils","organNFTAddress","Contract","totalSupply","toString","fetchedOrgans","i","uri","tokenURI","startsWith","response","fetch","metadata","json","push","patientList","getPatientList","patientDataPromises","map","patient","patientInfo","allPatientData","Promise","all","fetchDonorAddress","donor","getDonor","warn","handleChange","e","target","name","value","addPatientHandler","preventDefault","alert","doctorAddress","doctor","isAddress","patientRegistryWithSigner","connect","tx","addPatient","wait","togglePop","home","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","length","patientAddress","index","slice","_organ$attributes","_organ$attributes$fin","attributes","src","image","BloodType","find","attr","trait_type","description","id","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/hackaton/ITFest-MTS/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\n\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [patientData, setPatientData] = useState({ address: \"\", info: \"\" });\n\n\n\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    \n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n  \n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      console.log(\"üîë Conectat cu adresa:\", account);\n  \n      setAccount(account);\n      setProvider(provider);\n  \n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async() => {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = ethers.utils.getAddress(accounts[0])\n        setAccount(account);\n      }); \n      const organNFTAddress = config[network.chainId]?.organNFT?.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n      const escrow = new ethers.Contract(\n        config[network.chainId].escrow.address,\n        OrganEscrow,\n        provider\n      );\n  \n      const patientRegistry = new ethers.Contract(\n        config[network.chainId].patientRegistry.address,\n        PatientRegistry,\n        provider\n      );\n  \n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n  \n      console.log(\"üìú Contracte ini»õializate!\");\n  \n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n  \n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n  \n      setOrgans(fetchedOrgans);\n\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n  \n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n      const patientDataPromises = patientList.map(async (address) => {\n        const patient = await patientRegistry.patients(address);\n        return {\n          address: address,\n          info: patient.patientInfo,\n        };\n      });\n      const allPatientData = await Promise.all(patientDataPromises);\n\n      console.log(\"All Patient Data:\", allPatientData);\n      return allPatientData;\n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n  \n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  \n\n\n  const fetchDonorAddress = async (organNFT) => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n  \n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n  \n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  \n\n\n  const handleChange = (e) => {\n    setPatientData({ ...patientData, [e.target.name]: e.target.value });\n  };\n  \n  const addPatientHandler = async (e) => {\n    e.preventDefault();\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n  \n    const doctorAddress = await patientRegistry.doctor();\n    if (account !== doctorAddress) {\n      alert(\"Only the doctor can add patients.\");\n      return;\n    }\n  \n    if (!ethers.utils.isAddress(patientData.address)) {\n      alert(\"Invalid address.\");\n      return;\n    }\n  \n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.addPatient(patientData.address, patientData.info);\n      await tx.wait();\n      alert(`Patient ${patientData.address} added successfully`);\n      setPatients(await patientRegistry.getPatientList());\n      setPatientData({ address: \"\", info: \"\" });\n    } catch (error) {\n      console.error(\"Error adding patient:\", error);\n      alert(\"Failed to add patient.\");\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  const togglePop = (home) => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n\n  return (\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n      <Search />\n\n      <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n  <p className=\"text-4xl font-bold\">Organs For You</p>\n\n\n\n{account && organNFT && (\n  <div className=\"mt-5\">\n    <h3 className=\"text-xl font-bold\">Donate an Organ</h3>\n    <AddOrgan organNFT={organNFT} provider={provider} account={account} donorAddress={donorAddress} />\n  </div>\n)}\n\n\n      \n      {/* Buton pentru a adƒÉuga pacienti */}\n      {account && (\n        <div>\n          <button\n            onClick={addPatientHandler}\n            className=\"bg-green-500 text-white p-2 rounded-md\"\n          >\n            Add Patient\n          </button>\n\n          \n\n        </div>\n      )}\n\n      \n\n<div className=\"mt-5\">\n    <h3 className=\"text-xl font-bold\">Patients List</h3>\n    <ul className=\"list-disc mt-2\">\n      {patients.length === 0 ? (\n        <li>No patients added yet.</li>\n      ) : (\n        patients.map((patientAddress, index) => (\n          <li key={index}>\n            <p>{`${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`}</p>\n          </li>\n        ))\n      )}\n    </ul>\n  </div>\n\n  <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n  <p className=\"text-4xl font-bold\">Organs For You</p>\n  <div className=\"flex justify-center space-x-5 p-1\">\n    {!organs.length ? (\n      <p>Loading...</p>\n    ) : (\n      organs.map((organ, index) => (\n        organ && organ.attributes ? (\n          <div key={index} className=\"rounded-lg shadow-xl\" onClick={() => togglePop(organ)}>\n            <div>\n              <img src={organ.image || \"fallback.jpg\"} className=\"w-[350px] h-auto rounded-t-lg\" />\n            </div>\n            <div className=\"p-3\">\n              <p><strong>Organ:</strong> {organ.organ || \"N/A\"}</p>\n              <p><strong>Blood Type:</strong> {organ.BloodType || organ.attributes?.find(attr => attr.trait_type === \"Blood Type\")?.value || \"N/A\"}</p>\n              <p><strong>Description:</strong> {organ.description || \"No description\"}</p>\n              <p><strong>ID:</strong> {organ.id}</p>\n              \n              {/* Afi»ôeazƒÉ toate atributele disponibile */}\n              <div className=\"mt-2\">\n                <strong>Attributes:</strong>\n                <ul>\n                  {organ.attributes.map((attr, i) => (\n                    <li key={i}>{attr.trait_type}: {attr.value}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        ) : null\n      ))\n    )}\n  </div>\n</div>\n\n\n      </div>\n\n      {toggle && (\n        <Home organ={organ} provider={provider} account={account} escrow={escrow} togglePop={togglePop} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}