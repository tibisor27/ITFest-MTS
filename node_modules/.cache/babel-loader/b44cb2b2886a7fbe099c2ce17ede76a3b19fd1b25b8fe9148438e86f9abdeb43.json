{"ast":null,"code":"var _jsxFileName = \"/Users/tibisor/Desktop/ITFest-MTS/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n    try {\n      var _config$network$chain, _config$network$chain2;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      setAccount(account);\n      setProvider(provider);\n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = ethers.utils.getAddress(accounts[0]);\n        setAccount(account);\n      });\n      const organNFTAddress = (_config$network$chain = config[network.chainId]) === null || _config$network$chain === void 0 ? void 0 : (_config$network$chain2 = _config$network$chain.organNFT) === null || _config$network$chain2 === void 0 ? void 0 : _config$network$chain2.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n\n      // const waitingList = new ethers.Contract(\n      //   config[network.chainId].waitingList.address,\n      //   WaitingList,\n      //   provider\n      // );\n      console.log(\"üìú WaitingList contract initialized!:\", waitingList.address);\n      const escrow = new ethers.Contract(config[network.chainId].escrow.address, OrganEscrow, provider);\n      const patientRegistry = new ethers.Contract(config[network.chainId].patientRegistry.address, PatientRegistry, provider);\n      setWaitingList(waitingList);\n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n      console.log(\"üìú Contracte ini»õializate!\");\n\n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n      setOrgans(fetchedOrgans);\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n\n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n\n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  const fetchDonorAddress = async organNFT => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  const addPatientHandler = async () => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    const doctorAddress = await patientRegistry.doctor();\n    if (account !== doctorAddress) {\n      alert(\"Only the doctor can add patients.\");\n      return;\n    }\n    const patientAddress = prompt(\"Enter patient's address:\");\n    if (!ethers.utils.isAddress(patientAddress)) {\n      alert(\"Invalid address.\");\n      return;\n    }\n    const patientInfo = prompt(\"Enter patient information:\");\n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.addPatient(patientAddress, patientInfo);\n      await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n      alert(`Patient ${patientAddress} added successfully`);\n\n      // üõ† ActualizƒÉm manual lista pacien»õilor\n      const updatedPatients = await patientRegistry.getPatientList();\n      setPatients(updatedPatients); // üî• Acum pacien»õii sunt actualiza»õi √Æn interfa»õƒÉ\n    } catch (error) {\n      console.error(\"Error adding patient:\", error);\n      alert(\"Failed to add patient.\");\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const togglePop = home => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 211,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 212,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-7 flex flex-col gap-y-6 items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-4xl font-bold\",\n        children: \"Organs For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 215,\n        columnNumber: 3\n      }, this), account && organNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Donate an Organ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 221,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(AddOrgan, {\n          organNFT: organNFT,\n          provider: provider,\n          account: account,\n          donorAddress: donorAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 222,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 220,\n        columnNumber: 3\n      }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addPatientHandler,\n          className: \"bg-green-500 text-white p-2 rounded-md\",\n          children: \"Add Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 231,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 230,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Patients List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 246,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc mt-2\",\n          children: patients.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No patients added yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 249,\n            columnNumber: 9\n          }, this) : patients.map((patientAddress, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 253,\n              columnNumber: 13\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 252,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 247,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 245,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-7 flex flex-col gap-y-6 items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-4xl font-bold\",\n          children: \"Organs For You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 261,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center space-x-5 p-1\",\n          children: !organs.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 264,\n            columnNumber: 7\n          }, this) : organs.map((organ, index) => {\n            var _organ$attributes, _organ$attributes$fin;\n            return organ && organ.attributes ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rounded-lg shadow-xl\",\n              onClick: () => togglePop(organ),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: organ.image || \"fallback.jpg\",\n                  className: \"w-[350px] h-auto rounded-t-lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 270,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 269,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Organ:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 273,\n                    columnNumber: 18\n                  }, this), \" \", organ.organ || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 273,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Blood Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 274,\n                    columnNumber: 18\n                  }, this), \" \", organ.BloodType || ((_organ$attributes = organ.attributes) === null || _organ$attributes === void 0 ? void 0 : (_organ$attributes$fin = _organ$attributes.find(attr => attr.trait_type === \"Blood Type\")) === null || _organ$attributes$fin === void 0 ? void 0 : _organ$attributes$fin.value) || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 274,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Description:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 275,\n                    columnNumber: 18\n                  }, this), \" \", organ.description || \"No description\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 275,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"ID:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 276,\n                    columnNumber: 18\n                  }, this), \" \", organ.id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 276,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Attributes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 280,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    children: organ.attributes.map((attr, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [attr.trait_type, \": \", attr.value]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 283,\n                      columnNumber: 21\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 281,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 279,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 272,\n                columnNumber: 13\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 11\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 262,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 260,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 214,\n      columnNumber: 7\n    }, this), toggle && /*#__PURE__*/_jsxDEV(Home, {\n      organ: organ,\n      provider: provider,\n      account: account,\n      escrow: escrow,\n      togglePop: togglePop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 299,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 210,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"QiftDFI6hHr+QUgeIEzTaoVmWH0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","logo","AddOrgan","uploadToPinata","OrganNFT","OrganEscrow","WaitingList","PatientRegistry","config","Navigation","Search","Home","jsxDEV","_jsxDEV","App","_s","account","setAccount","provider","setProvider","organNFT","setOrganNFT","waitingList","setWaitingList","escrow","setEscrow","organs","setOrgans","organ","setOrgan","toggle","setToggle","patientRegistry","setPatientRegistry","patients","setPatients","donorAddress","setDonorAddress","loadBlockchainData","console","log","window","ethereum","error","_config$network$chain","_config$network$chain2","providers","Web3Provider","send","signer","getSigner","getAddress","network","getNetwork","chainId","on","accounts","request","method","utils","organNFTAddress","address","Contract","totalSupply","toString","fetchedOrgans","i","uri","tokenURI","startsWith","response","fetch","metadata","json","push","patientList","getPatientList","fetchDonorAddress","donor","getDonor","warn","addPatientHandler","alert","doctorAddress","doctor","patientAddress","prompt","isAddress","patientInfo","patientRegistryWithSigner","connect","tx","addPatient","wait","updatedPatients","togglePop","home","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","length","map","index","slice","_organ$attributes","_organ$attributes$fin","attributes","src","image","BloodType","find","attr","trait_type","value","description","id","_c","$RefreshReg$"],"sources":["/Users/tibisor/Desktop/ITFest-MTS/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\n\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n\n\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    \n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n  \n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n  \n      setAccount(account);\n      setProvider(provider);\n  \n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n  \n      window.ethereum.on('accountsChanged', async() => {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = ethers.utils.getAddress(accounts[0])\n        setAccount(account);\n      }); \n      \n      const organNFTAddress = config[network.chainId]?.organNFT?.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n  \n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n  \n      // const waitingList = new ethers.Contract(\n      //   config[network.chainId].waitingList.address,\n      //   WaitingList,\n      //   provider\n      // );\n      console.log(\"üìú WaitingList contract initialized!:\",waitingList.address);\n  \n      const escrow = new ethers.Contract(\n        config[network.chainId].escrow.address,\n        OrganEscrow,\n        provider\n      );\n  \n      const patientRegistry = new ethers.Contract(\n        config[network.chainId].patientRegistry.address,\n        PatientRegistry,\n        provider\n      );\n  \n      setWaitingList(waitingList);\n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n  \n      console.log(\"üìú Contracte ini»õializate!\");\n  \n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n  \n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n  \n      setOrgans(fetchedOrgans);\n\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n  \n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n  \n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n  \n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  \n\n\n  const fetchDonorAddress = async (organNFT) => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n  \n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n  \n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  \n\n\nconst addPatientHandler = async () => {\n  if (!account) {\n    alert(\"Please connect your wallet.\");\n    return;\n  }\n\n  const doctorAddress = await patientRegistry.doctor();\n  if (account !== doctorAddress) {\n    alert(\"Only the doctor can add patients.\");\n    return;\n  }\n\n  const patientAddress = prompt(\"Enter patient's address:\");\n  if (!ethers.utils.isAddress(patientAddress)) {\n    alert(\"Invalid address.\");\n    return;\n  }\n\n  const patientInfo = prompt(\"Enter patient information:\");\n\n  try {\n    const signer = provider.getSigner();\n    const patientRegistryWithSigner = patientRegistry.connect(signer);\n\n    const tx = await patientRegistryWithSigner.addPatient(patientAddress, patientInfo);\n    await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n    alert(`Patient ${patientAddress} added successfully`);\n\n    // üõ† ActualizƒÉm manual lista pacien»õilor\n    const updatedPatients = await patientRegistry.getPatientList();\n    setPatients(updatedPatients); // üî• Acum pacien»õii sunt actualiza»õi √Æn interfa»õƒÉ\n  } catch (error) {\n    console.error(\"Error adding patient:\", error);\n    alert(\"Failed to add patient.\");\n  }\n\n\n\n};\n\n\n\n\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  const togglePop = (home) => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n\n  return (\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n      <Search />\n\n      <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n  <p className=\"text-4xl font-bold\">Organs For You</p>\n\n\n\n{account && organNFT && (\n  <div className=\"mt-5\">\n    <h3 className=\"text-xl font-bold\">Donate an Organ</h3>\n    <AddOrgan organNFT={organNFT} provider={provider} account={account} donorAddress={donorAddress} />\n  </div>\n)}\n\n\n      \n      {/* Buton pentru a adƒÉuga pacienti */}\n      {account && (\n        <div>\n          <button\n            onClick={addPatientHandler}\n            className=\"bg-green-500 text-white p-2 rounded-md\"\n          >\n            Add Patient\n          </button>\n\n          \n\n        </div>\n      )}\n\n      \n\n<div className=\"mt-5\">\n    <h3 className=\"text-xl font-bold\">Patients List</h3>\n    <ul className=\"list-disc mt-2\">\n      {patients.length === 0 ? (\n        <li>No patients added yet.</li>\n      ) : (\n        patients.map((patientAddress, index) => (\n          <li key={index}>\n            <p>{`${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`}</p>\n          </li>\n        ))\n      )}\n    </ul>\n  </div>\n\n  <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n  <p className=\"text-4xl font-bold\">Organs For You</p>\n  <div className=\"flex justify-center space-x-5 p-1\">\n    {!organs.length ? (\n      <p>Loading...</p>\n    ) : (\n      organs.map((organ, index) => (\n        organ && organ.attributes ? (\n          <div key={index} className=\"rounded-lg shadow-xl\" onClick={() => togglePop(organ)}>\n            <div>\n              <img src={organ.image || \"fallback.jpg\"} className=\"w-[350px] h-auto rounded-t-lg\" />\n            </div>\n            <div className=\"p-3\">\n              <p><strong>Organ:</strong> {organ.organ || \"N/A\"}</p>\n              <p><strong>Blood Type:</strong> {organ.BloodType || organ.attributes?.find(attr => attr.trait_type === \"Blood Type\")?.value || \"N/A\"}</p>\n              <p><strong>Description:</strong> {organ.description || \"No description\"}</p>\n              <p><strong>ID:</strong> {organ.id}</p>\n              \n              {/* Afi»ôeazƒÉ toate atributele disponibile */}\n              <div className=\"mt-2\">\n                <strong>Attributes:</strong>\n                <ul>\n                  {organ.attributes.map((attr, i) => (\n                    <li key={i}>{attr.trait_type}: {attr.value}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        ) : null\n      ))\n    )}\n  </div>\n</div>\n\n\n      </div>\n\n      {toggle && (\n        <Home organ={organ} provider={provider} account={account} escrow={escrow} togglePop={togglePop} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}