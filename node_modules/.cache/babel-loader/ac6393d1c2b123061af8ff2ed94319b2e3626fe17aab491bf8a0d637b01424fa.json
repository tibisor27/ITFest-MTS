{"ast":null,"code":"var _jsxFileName = \"/Users/tibisor/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      console.error(\"‚ùå DonorAddress nu este √ÆncƒÉrcat! VerificƒÉ loadBlockchainData()\");\n      alert(\"Donor address not found!\");\n      return;\n    }\n    console.log(\"organNFT:\", organNFT);\n    console.log(\"provider:\", provider);\n    console.log(\"account:\", account);\n    console.log(\"donorAddress:\", donorAddress);\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt ini»õializate!\");\n      return;\n    }\n\n    // üõë VerificƒÉm dacƒÉ utilizatorul conectat este donor-ul\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n    setLoading(true);\n    const nftData = {\n      organ: \"Plamani\",\n      BloodType: \"A1\",\n      description: \"Test\",\n      image: \"https://ipfs.io/ipfs/bafkreiduadulzcm27f7lo4kgeadyyszk5gbooviueikcydbjbgcearkjia\",\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: \"NOU\",\n        value: 20\n      }, {\n        trait_type: \"NOU\",\n        value: \"Condo\"\n      }, {\n        trait_type: \"nou\",\n        value: 2\n      }, {\n        trait_type: \"nou\",\n        value: 3\n      }, {\n        trait_type: \"nou\",\n        value: 2200\n      }, {\n        trait_type: \"nou\",\n        value: 2013\n      }]\n    };\n\n    // üîó √éncƒÉrcƒÉm metadata pe Pinata\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la √ÆncƒÉrcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n    try {\n      // üéØ ConectƒÉm contractul NFT la donor (signer)\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n\n      // üî• Mint NFT ca donor\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    onClick: handleAddOrgan,\n    disabled: loading,\n    className: \"bg-blue-500 text-white p-2 rounded-md mt-3\",\n    children: loading ? \"Minting...\" : \"Add Organ\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 74,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"/Rjh5rPqCCqf0XYnTUk9ZNavw3Q=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["uploadToPinata","useState","ethers","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","_s","loading","setLoading","handleAddOrgan","console","error","alert","log","toLowerCase","nftData","organ","BloodType","description","image","id","Date","now","toString","attributes","trait_type","value","ipfsUrl","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","onClick","disabled","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/tibisor/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport default function AddOrgan({ organNFT, provider, account, donorAddress }) {\n  const [loading, setLoading] = useState(false);\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n        console.error(\"‚ùå DonorAddress nu este √ÆncƒÉrcat! VerificƒÉ loadBlockchainData()\");\n        alert(\"Donor address not found!\");\n        return;\n    }\n    \n    console.log(\"organNFT:\", organNFT);\n    console.log(\"provider:\", provider);\n    console.log(\"account:\", account);\n    console.log(\"donorAddress:\", donorAddress);\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt ini»õializate!\");\n      return;\n    }\n\n    // üõë VerificƒÉm dacƒÉ utilizatorul conectat este donor-ul\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n\n    setLoading(true);\n\n    const nftData = {\n      organ: \"Plamani\",\n      BloodType: \"A1\",\n      description: \"Test\",\n      image: \"https://ipfs.io/ipfs/bafkreiduadulzcm27f7lo4kgeadyyszk5gbooviueikcydbjbgcearkjia\",\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: \"NOU\", value: 20 },\n        { trait_type: \"NOU\", value: \"Condo\" },\n        { trait_type: \"nou\", value: 2 },\n        { trait_type: \"nou\", value: 3 },\n        { trait_type: \"nou\", value: 2200 },\n        { trait_type: \"nou\", value: 2013 },\n      ],\n    };\n\n    // üîó √éncƒÉrcƒÉm metadata pe Pinata\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la √ÆncƒÉrcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      // üéØ ConectƒÉm contractul NFT la donor (signer)\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n\n      // üî• Mint NFT ca donor\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <button\n      onClick={handleAddOrgan}\n      disabled={loading}\n      className=\"bg-blue-500 text-white p-2 rounded-md mt-3\"\n    >\n      {loading ? \"Minting...\" : \"Add Organ\"}\n    </button>\n  );\n}"],"mappings":";;AAAA,SAASA,cAAc,QAAQ,iBAAiB;AAChD,SAASC,QAAQ,QAAQ,OAAO;AAChC,SAASC,MAAM,QAAQ,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,eAAe,SAASC,QAAQA,CAAC;EAAEC,QAAQ;EAAEC,QAAQ;EAAEC,OAAO;EAAEC;AAAa,CAAC,EAAE;EAAAC,EAAA;EAC9E,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGX,QAAQ,CAAC,KAAK,CAAC;EAE7C,MAAMY,cAAc,GAAG,MAAAA,CAAA,KAAY;IACjC,IAAI,CAACJ,YAAY,EAAE;MACfK,OAAO,CAACC,KAAK,CAAC,gEAAgE,CAAC;MAC/EC,KAAK,CAAC,0BAA0B,CAAC;MACjC;IACJ;IAEAF,OAAO,CAACG,GAAG,CAAC,WAAW,EAAEX,QAAQ,CAAC;IAClCQ,OAAO,CAACG,GAAG,CAAC,WAAW,EAAEV,QAAQ,CAAC;IAClCO,OAAO,CAACG,GAAG,CAAC,UAAU,EAAET,OAAO,CAAC;IAChCM,OAAO,CAACG,GAAG,CAAC,eAAe,EAAER,YAAY,CAAC;IAC1C,IAAI,CAACH,QAAQ,IAAI,CAACC,QAAQ,IAAI,CAACC,OAAO,IAAI,CAACC,YAAY,EAAE;MACvDO,KAAK,CAAC,gDAAgD,CAAC;MACvD;IACF;;IAEA;IACA,IAAIR,OAAO,CAACU,WAAW,CAAC,CAAC,KAAKT,YAAY,CAACS,WAAW,CAAC,CAAC,EAAE;MACxDF,KAAK,CAAC,oCAAoC,CAAC;MAC3C;IACF;IAEAJ,UAAU,CAAC,IAAI,CAAC;IAEhB,MAAMO,OAAO,GAAG;MACdC,KAAK,EAAE,SAAS;MAChBC,SAAS,EAAE,IAAI;MACfC,WAAW,EAAE,MAAM;MACnBC,KAAK,EAAE,kFAAkF;MACzFC,EAAE,EAAEC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;MACzBC,UAAU,EAAE,CACV;QAAEC,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAG,CAAC,EAChC;QAAED,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAQ,CAAC,EACrC;QAAED,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAE,CAAC,EAC/B;QAAED,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAE,CAAC,EAC/B;QAAED,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC,EAClC;QAAED,UAAU,EAAE,KAAK;QAAEC,KAAK,EAAE;MAAK,CAAC;IAEtC,CAAC;;IAED;IACA,MAAMC,OAAO,GAAG,MAAM/B,cAAc,CAACmB,OAAO,CAAC;IAC7C,IAAI,CAACY,OAAO,EAAE;MACZf,KAAK,CAAC,8BAA8B,CAAC;MACrCJ,UAAU,CAAC,KAAK,CAAC;MACjB;IACF;IAEA,IAAI;MACF;MACA,MAAMoB,MAAM,GAAGzB,QAAQ,CAAC0B,SAAS,CAAC,CAAC;MACnC,MAAMC,kBAAkB,GAAG5B,QAAQ,CAAC6B,OAAO,CAACH,MAAM,CAAC;;MAEnD;MACA,MAAMI,MAAM,GAAG,MAAMF,kBAAkB,CAACG,YAAY,CAACN,OAAO,CAAC;MAC7D,MAAMK,MAAM,CAACE,IAAI,CAAC,CAAC;MACnBtB,KAAK,CAAC,uBAAuB,CAAC;IAChC,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdD,OAAO,CAACC,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1CC,KAAK,CAAC,iBAAiB,CAAC;IAC1B;IAEAJ,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC;EAED,oBACER,OAAA;IACEmC,OAAO,EAAE1B,cAAe;IACxB2B,QAAQ,EAAE7B,OAAQ;IAClB8B,SAAS,EAAC,4CAA4C;IAAAC,QAAA,EAErD/B,OAAO,GAAG,YAAY,GAAG;EAAW;IAAAgC,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAC/B,CAAC;AAEb;AAACpC,EAAA,CA7EuBL,QAAQ;AAAA0C,EAAA,GAAR1C,QAAQ;AAAA,IAAA0C,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}