{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { useState } from 'react';\nimport { uploadToPinata } from '../utils/pinata';\nimport { ethers } from 'ethers';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress\n}) {\n  _s();\n  const [formData, setFormData] = useState({\n    organ: '',\n    BloodType: '',\n    description: '',\n    image: ''\n  });\n  const [loading, setLoading] = useState(false);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert('Donor address not found!');\n      return;\n    }\n    if (!formData.organ || !formData.BloodType || !formData.description || !formData.image) {\n      alert('All fields are required!');\n      return;\n    }\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert('Only the donor can mint NFTs!');\n      return;\n    }\n    setLoading(true);\n    const nftData = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: 'Blood Type',\n        value: formData.BloodType\n      }, {\n        trait_type: 'Organ',\n        value: formData.organ\n      }]\n    };\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert('Error uploading to IPFS!');\n      setLoading(false);\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert('NFT minted successfully!');\n      setFormData({\n        organ: '',\n        BloodType: '',\n        description: '',\n        image: ''\n      });\n    } catch (error) {\n      console.error('Minting error:', error);\n      alert('Minting failed!');\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 bg-gray-100 rounded-md w-80\",\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      className: \"text-lg font-bold mb-2\",\n      children: \"Donate an Organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"organ\",\n      placeholder: \"Organ Type\",\n      value: formData.organ,\n      onChange: handleChange,\n      className: \"border p-2 mb-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"BloodType\",\n      placeholder: \"Blood Type\",\n      value: formData.BloodType,\n      onChange: handleChange,\n      className: \"border p-2 mb-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n      name: \"description\",\n      placeholder: \"Description\",\n      value: formData.description,\n      onChange: handleChange,\n      className: \"border p-2 mb-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"image\",\n      placeholder: \"IPFS Image URL\",\n      value: formData.image,\n      onChange: handleChange,\n      className: \"border p-2 mb-2 w-full\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddOrgan,\n      disabled: loading,\n      className: \"bg-blue-500 text-white p-2 rounded-md w-full\",\n      children: loading ? 'Minting...' : 'Add Organ'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 111,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"c+qYDJSU88sDC2YszF+fWLNB8TQ=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["useState","uploadToPinata","ethers","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","_s","formData","setFormData","organ","BloodType","description","image","loading","setLoading","handleChange","e","target","name","value","handleAddOrgan","alert","toLowerCase","nftData","id","Date","now","toString","attributes","trait_type","ipfsUrl","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { useState } from 'react';\nimport { uploadToPinata } from '../utils/pinata';\nimport { ethers } from 'ethers';\n\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress,\n}) {\n  const [formData, setFormData] = useState({\n    organ: '',\n    BloodType: '',\n    description: '',\n    image: '',\n  });\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert('Donor address not found!');\n      return;\n    }\n\n    if (\n      !formData.organ ||\n      !formData.BloodType ||\n      !formData.description ||\n      !formData.image\n    ) {\n      alert('All fields are required!');\n      return;\n    }\n\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert('Only the donor can mint NFTs!');\n      return;\n    }\n\n    setLoading(true);\n\n    const nftData = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: 'Blood Type', value: formData.BloodType },\n        { trait_type: 'Organ', value: formData.organ },\n      ],\n    };\n\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert('Error uploading to IPFS!');\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert('NFT minted successfully!');\n      setFormData({ organ: '', BloodType: '', description: '', image: '' });\n    } catch (error) {\n      console.error('Minting error:', error);\n      alert('Minting failed!');\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"p-4 bg-gray-100 rounded-md w-80\">\n      <h3 className=\"text-lg font-bold mb-2\">Donate an Organ</h3>\n      <input\n        type=\"text\"\n        name=\"organ\"\n        placeholder=\"Organ Type\"\n        value={formData.organ}\n        onChange={handleChange}\n        className=\"border p-2 mb-2 w-full\"\n      />\n      <input\n        type=\"text\"\n        name=\"BloodType\"\n        placeholder=\"Blood Type\"\n        value={formData.BloodType}\n        onChange={handleChange}\n        className=\"border p-2 mb-2 w-full\"\n      />\n      <textarea\n        name=\"description\"\n        placeholder=\"Description\"\n        value={formData.description}\n        onChange={handleChange}\n        className=\"border p-2 mb-2 w-full\"\n      />\n      <input\n        type=\"text\"\n        name=\"image\"\n        placeholder=\"IPFS Image URL\"\n        value={formData.image}\n        onChange={handleChange}\n        className=\"border p-2 mb-2 w-full\"\n      />\n      <button\n        onClick={handleAddOrgan}\n        disabled={loading}\n        className=\"bg-blue-500 text-white p-2 rounded-md w-full\"\n      >\n        {loading ? 'Minting...' : 'Add Organ'}\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}