{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\"\n  });\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert(\"Donor address not found!\");\n      return;\n    }\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt inițializate!\");\n      return;\n    }\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Toate câmpurile sunt obligatorii!\");\n      return;\n    }\n    setLoading(true);\n    const nftData = {\n      organ: formData.organ,\n      bloodType: formData.bloodType,\n      description: formData.description,\n      image: formData.image,\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: \"Blood Type\",\n        value: formData.bloodType\n      }, {\n        trait_type: \"Description\",\n        value: formData.description\n      }]\n    };\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      localStorage.setItem(\"organData\", JSON.stringify({\n        ...nftData,\n        ipfsUrl\n      }));\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border rounded-md shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-4\",\n      children: \"Completeaz\\u0103 detaliile organului\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"organ\",\n      placeholder: \"Organ (ex: Rinichi)\",\n      value: formData.organ,\n      onChange: handleChange,\n      className: \"w-full p-2 border rounded mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"bloodType\",\n      placeholder: \"Blood Type (ex: A+)\",\n      value: formData.bloodType,\n      onChange: handleChange,\n      className: \"w-full p-2 border rounded mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"description\",\n      placeholder: \"Descriere\",\n      value: formData.description,\n      onChange: handleChange,\n      className: \"w-full p-2 border rounded mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      name: \"image\",\n      placeholder: \"Image URL (IPFS link)\",\n      value: formData.image,\n      onChange: handleChange,\n      className: \"w-full p-2 border rounded mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddOrgan,\n      disabled: loading,\n      className: \"bg-blue-500 text-white p-2 rounded-md mt-3\",\n      children: loading ? \"Minting...\" : \"Add Organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 114,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"cp/M0H8xQ1+RB/ZdNd++AQZNa/o=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["uploadToPinata","useState","ethers","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","_s","loading","setLoading","formData","setFormData","organ","bloodType","description","image","handleChange","e","target","name","value","handleAddOrgan","alert","toLowerCase","nftData","id","Date","now","toString","attributes","trait_type","ipfsUrl","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","localStorage","setItem","JSON","stringify","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport default function AddOrgan({ organNFT, provider, account, donorAddress }) {\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\",\n  });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert(\"Donor address not found!\");\n      return;\n    }\n\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt inițializate!\");\n      return;\n    }\n\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Toate câmpurile sunt obligatorii!\");\n      return;\n    }\n\n    setLoading(true);\n\n    const nftData = {\n      organ: formData.organ,\n      bloodType: formData.bloodType,\n      description: formData.description,\n      image: formData.image,\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: \"Blood Type\", value: formData.bloodType },\n        { trait_type: \"Description\", value: formData.description },\n      ],\n    };\n\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n\n      localStorage.setItem(\"organData\", JSON.stringify({ ...nftData, ipfsUrl }));\n\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"p-4 border rounded-md shadow-md\">\n      <h2 className=\"text-xl font-bold mb-4\">Completează detaliile organului</h2>\n      <input\n        type=\"text\"\n        name=\"organ\"\n        placeholder=\"Organ (ex: Rinichi)\"\n        value={formData.organ}\n        onChange={handleChange}\n        className=\"w-full p-2 border rounded mb-2\"\n      />\n      <input\n        type=\"text\"\n        name=\"bloodType\"\n        placeholder=\"Blood Type (ex: A+)\"\n        value={formData.bloodType}\n        onChange={handleChange}\n        className=\"w-full p-2 border rounded mb-2\"\n      />\n      <input\n        type=\"text\"\n        name=\"description\"\n        placeholder=\"Descriere\"\n        value={formData.description}\n        onChange={handleChange}\n        className=\"w-full p-2 border rounded mb-2\"\n      />\n      <input\n        type=\"text\"\n        name=\"image\"\n        placeholder=\"Image URL (IPFS link)\"\n        value={formData.image}\n        onChange={handleChange}\n        className=\"w-full p-2 border rounded mb-2\"\n      />\n\n      <button\n        onClick={handleAddOrgan}\n        disabled={loading}\n        className=\"bg-blue-500 text-white p-2 rounded-md mt-3\"\n      >\n        {loading ? \"Minting...\" : \"Add Organ\"}\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}