{"ast":null,"code":"var _jsxFileName = \"/Users/tibisor/Desktop/ITFest-MTS/src/App.js\",\n  _s = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\nimport { AES } from \"crypto-js\";\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n    try {\n      var _config$network$chain, _config$network$chain2;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      console.log(\"üîë Conectat cu adresa:\", account);\n      setAccount(account);\n      setProvider(provider);\n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = ethers.utils.getAddress(accounts[0]);\n        setAccount(account);\n      });\n      const organNFTAddress = (_config$network$chain = config[network.chainId]) === null || _config$network$chain === void 0 ? void 0 : (_config$network$chain2 = _config$network$chain.organNFT) === null || _config$network$chain2 === void 0 ? void 0 : _config$network$chain2.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n      const escrow = new ethers.Contract(config[network.chainId].escrow.address, OrganEscrow, provider);\n      const patientRegistry = new ethers.Contract(config[network.chainId].patientRegistry.address, PatientRegistry, provider);\n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n      console.log(\"üìú Contracte ini»õializate!\");\n\n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n      setOrgans(fetchedOrgans);\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n\n      // Load patients cu informatii\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n      const patientDataPromises = patientList.map(async address => {\n        const patient = await patientRegistry.patients(address);\n        return {\n          address: address,\n          info: patient.patientInfo,\n          bloodType: patient.bloodType.toString(),\n          diseaseSeverity: patient.diseaseSeverity.toString(),\n          surgicalRisk: patient.surgicalRisk.toString()\n        };\n      });\n      const allPatientData = await Promise.all(patientDataPromises);\n      const selectPatientWithHighestSeverity = async () => {\n        const patientWithHighestSeverity = patients.reduce((maxPatient, currentPatient) => {\n          const currentSeverity = parseInt(currentPatient.diseaseSeverity, 10); // Convertim la numƒÉr\n          if (!maxPatient || currentSeverity > parseInt(maxPatient.diseaseSeverity, 10)) {\n            return currentPatient; // ActualizƒÉm pacientul cu cel mai mare diseaseSeverity\n          }\n          return maxPatient;\n        }, null);\n        if (patientWithHighestSeverity) {\n          console.log(\"Pacientul cu cel mai mare diseaseSeverity este:\", patientWithHighestSeverity);\n          setSelectedPatient(patientWithHighestSeverity); // SeteazƒÉ pacientul √Æn starea aplica»õiei\n\n          alert(`Pacientul selectat pentru transplant: ${patientWithHighestSeverity.address}`);\n        } else {\n          alert(\"Nu s-a gƒÉsit niciun pacient cu diseaseSeverity valid.\");\n        }\n      };\n      await selectPatientWithHighestSeverity();\n      console.log(\"All Patient Data:\", allPatientData);\n      return allPatientData;\n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  const fetchDonorAddress = async organNFT => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  const addPatientHandler = async () => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    const doctorAddress = await patientRegistry.doctor();\n    if (account !== doctorAddress) {\n      alert(\"Only the doctor can add patients.\");\n      return;\n    }\n    const patientAddress = prompt(\"Enter patient's address:\");\n    if (!ethers.utils.isAddress(patientAddress)) {\n      alert(\"Invalid address.\");\n      return;\n    }\n    const patientInfo = prompt(\"Enter patient information:\");\n    const bloodType = prompt(\"Enter patient bloodType:\");\n    const diseaseSeverity = prompt(\"Enter patient diseaseSeverity:\");\n    const surgicalRisk = prompt(\"Enter patient surgicalRisk:\");\n    const secretKey = \"your-secret-key\"; // Cheia secretƒÉ folositƒÉ pentru criptare\n    const encryptedInfo = AES.encrypt(patientInfo, secretKey).toString(); // CriptƒÉm info pacientului\n    const encryptedBloodType = AES.encrypt(bloodType, secretKey).toString(); // CriptƒÉm bloodType\n    const encryptedDiseaseSeverity = AES.encrypt(diseaseSeverity, secretKey).toString(); // CriptƒÉm diseaseSeverity\n    const encryptedSurgicalRisk = AES.encrypt(surgicalRisk, secretKey).toString(); // CriptƒÉm surgicalRisk\n    console.log(\"Encrypted Info:\", encryptedInfo);\n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      console.log(\"patientRegistryWithSigner!!!!\", patientRegistryWithSigner.address);\n      const tx = await patientRegistryWithSigner.addPatient(patientAddress, encryptedInfo, bloodType, diseaseSeverity, surgicalRisk);\n      await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n      alert(`Patient ${patientAddress} added successfully`);\n\n      // üõ† ActualizƒÉm manual lista pacien»õilor\n      const updatedPatients = await patientRegistry.getPatientList();\n      setPatients(updatedPatients); // üî• Acum pacien»õii sunt actualiza»õi √Æn interfa»õƒÉ\n    } catch (error) {\n      console.error(\"Error adding patient:\", error);\n      alert(\"Failed to add patient.\");\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const togglePop = home => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: selectPatientWithHighestSeverity,\n      className: \"bg-blue-500 text-white p-2 rounded-md\",\n      children: \"Select Patient with Highest Disease Severity\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 5\n    }, this), selectedPatient && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Selected Patient for Transplant:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 251,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Address:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 252,\n          columnNumber: 12\n        }, this), \" \", selectedPatient.address]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 252,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Info:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 253,\n          columnNumber: 12\n        }, this), \" \", selectedPatient.info]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 253,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Blood Type:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 254,\n          columnNumber: 12\n        }, this), \" \", selectedPatient.bloodType]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 254,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Disease Severity:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 255,\n          columnNumber: 12\n        }, this), \" \", selectedPatient.diseaseSeverity]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 255,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: \"Surgical Risk:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 256,\n          columnNumber: 12\n        }, this), \" \", selectedPatient.surgicalRisk]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 239,\n    columnNumber: 5\n  }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 261,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-7 flex flex-col gap-y-6 items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-4xl font-bold\",\n        children: \"Organs For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 265,\n        columnNumber: 9\n      }, this), account && organNFT && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Donate an Organ\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 268,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(AddOrgan, {\n          organNFT: organNFT,\n          provider: provider,\n          account: account,\n          donorAddress: donorAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 269,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 267,\n        columnNumber: 11\n      }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: addPatientHandler,\n          className: \"bg-green-500 text-white p-2 rounded-md\",\n          children: \"Add Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 275,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 274,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Patients List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 290,\n          columnNumber: 5\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc mt-2\",\n          children: patients.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No patients added yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 293,\n            columnNumber: 9\n          }, this) : patients.map((patientAddress, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            children: /*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 297,\n              columnNumber: 13\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 296,\n            columnNumber: 11\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 291,\n          columnNumber: 5\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 1\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: selectPatientWithHighestSeverity,\n          className: \"bg-blue-500 text-white p-2 rounded-md\",\n          children: \"Select Patient with Highest Disease Severity\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 305,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 3\n      }, this), selectedPatient && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          children: \"Selected Patient for Transplant:\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Address:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 317,\n            columnNumber: 16\n          }, this), \" \", selectedPatient.address]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Info:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 318,\n            columnNumber: 16\n          }, this), \" \", selectedPatient.info]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 318,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Blood Type:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 319,\n            columnNumber: 16\n          }, this), \" \", selectedPatient.bloodType]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 319,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Disease Severity:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 320,\n            columnNumber: 16\n          }, this), \" \", selectedPatient.diseaseSeverity]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 320,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n            children: \"Surgical Risk:\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 321,\n            columnNumber: 16\n          }, this), \" \", selectedPatient.surgicalRisk]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 321,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"p-7 flex flex-col gap-y-6 items-center\",\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: \"text-4xl font-bold\",\n          children: \"Organs For You\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 325,\n          columnNumber: 3\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-center space-x-5 p-1\",\n          children: !organs.length ? /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 328,\n            columnNumber: 7\n          }, this) : organs.map((organ, index) => {\n            var _organ$attributes, _organ$attributes$fin;\n            return organ && organ.attributes ? /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"rounded-lg shadow-xl\",\n              onClick: () => togglePop(organ),\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                children: /*#__PURE__*/_jsxDEV(\"img\", {\n                  src: organ.image || \"fallback.jpg\",\n                  className: \"w-[350px] h-auto rounded-t-lg\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 334,\n                  columnNumber: 15\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 333,\n                columnNumber: 13\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"p-3\",\n                children: [/*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Organ:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 337,\n                    columnNumber: 18\n                  }, this), \" \", organ.organ || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 337,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Blood Type:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 338,\n                    columnNumber: 18\n                  }, this), \" \", organ.BloodType || ((_organ$attributes = organ.attributes) === null || _organ$attributes === void 0 ? void 0 : (_organ$attributes$fin = _organ$attributes.find(attr => attr.trait_type === \"Blood Type\")) === null || _organ$attributes$fin === void 0 ? void 0 : _organ$attributes$fin.value) || \"N/A\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 338,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Description:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 339,\n                    columnNumber: 18\n                  }, this), \" \", organ.description || \"No description\"]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 339,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"ID:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 340,\n                    columnNumber: 18\n                  }, this), \" \", organ.id]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 340,\n                  columnNumber: 15\n                }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: \"mt-2\",\n                  children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n                    children: \"Attributes:\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 344,\n                    columnNumber: 17\n                  }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n                    children: organ.attributes.map((attr, i) => /*#__PURE__*/_jsxDEV(\"li\", {\n                      children: [attr.trait_type, \": \", attr.value]\n                    }, i, true, {\n                      fileName: _jsxFileName,\n                      lineNumber: 347,\n                      columnNumber: 21\n                    }, this))\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 345,\n                    columnNumber: 17\n                  }, this)]\n                }, void 0, true, {\n                  fileName: _jsxFileName,\n                  lineNumber: 343,\n                  columnNumber: 15\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 336,\n                columnNumber: 13\n              }, this)]\n            }, index, true, {\n              fileName: _jsxFileName,\n              lineNumber: 332,\n              columnNumber: 11\n            }, this) : null;\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 326,\n          columnNumber: 3\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 3\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 264,\n      columnNumber: 7\n    }, this), toggle && /*#__PURE__*/_jsxDEV(Home, {\n      organ: organ,\n      provider: provider,\n      account: account,\n      escrow: escrow,\n      togglePop: togglePop\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 363,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 260,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"usT3E94oHq9B/xd4eHNko++n6zo=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","logo","AddOrgan","uploadToPinata","AES","OrganNFT","OrganEscrow","WaitingList","PatientRegistry","config","Navigation","Search","Home","jsxDEV","_jsxDEV","App","_s","account","setAccount","provider","setProvider","organNFT","setOrganNFT","waitingList","setWaitingList","escrow","setEscrow","organs","setOrgans","organ","setOrgan","toggle","setToggle","patientRegistry","setPatientRegistry","patients","setPatients","donorAddress","setDonorAddress","selectedPatient","setSelectedPatient","loadBlockchainData","console","log","window","ethereum","error","_config$network$chain","_config$network$chain2","providers","Web3Provider","send","signer","getSigner","getAddress","network","getNetwork","chainId","on","accounts","request","method","utils","organNFTAddress","address","Contract","totalSupply","toString","fetchedOrgans","i","uri","tokenURI","startsWith","response","fetch","metadata","json","push","patientList","getPatientList","patientDataPromises","map","patient","info","patientInfo","bloodType","diseaseSeverity","surgicalRisk","allPatientData","Promise","all","selectPatientWithHighestSeverity","patientWithHighestSeverity","reduce","maxPatient","currentPatient","currentSeverity","parseInt","alert","fetchDonorAddress","donor","getDonor","warn","addPatientHandler","doctorAddress","doctor","patientAddress","prompt","isAddress","secretKey","encryptedInfo","encrypt","encryptedBloodType","encryptedDiseaseSeverity","encryptedSurgicalRisk","patientRegistryWithSigner","connect","tx","addPatient","wait","updatedPatients","togglePop","home","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","length","index","slice","_organ$attributes","_organ$attributes$fin","attributes","src","image","BloodType","find","attr","trait_type","value","description","id","_c","$RefreshReg$"],"sources":["/Users/tibisor/Desktop/ITFest-MTS/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\nimport { AES } from \"crypto-js\";\n\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\n\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [selectedPatient, setSelectedPatient] = useState(null);\n\n\n\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    \n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n  \n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      console.log(\"üîë Conectat cu adresa:\", account);\n  \n      setAccount(account);\n      setProvider(provider);\n  \n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async() => {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = ethers.utils.getAddress(accounts[0])\n        setAccount(account);\n      }); \n      const organNFTAddress = config[network.chainId]?.organNFT?.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n      const escrow = new ethers.Contract(\n        config[network.chainId].escrow.address,\n        OrganEscrow,\n        provider\n      );\n  \n      const patientRegistry = new ethers.Contract(\n        config[network.chainId].patientRegistry.address,\n        PatientRegistry,\n        provider\n      );\n  \n      setEscrow(escrow);\n      setPatientRegistry(patientRegistry);\n  \n      console.log(\"üìú Contracte ini»õializate!\");\n  \n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n  \n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n  \n      setOrgans(fetchedOrgans);\n\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n  \n      // Load patients cu informatii\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n      const patientDataPromises = patientList.map(async (address) => {\n        const patient = await patientRegistry.patients(address);\n        return {\n          address: address,\n          info: patient.patientInfo,\n          bloodType: patient.bloodType.toString(),\n          diseaseSeverity: patient.diseaseSeverity.toString(),\n          surgicalRisk: patient.surgicalRisk.toString()\n        };\n      });\n      const allPatientData = await Promise.all(patientDataPromises);\n      const selectPatientWithHighestSeverity = async () => {\n        const patientWithHighestSeverity = patients.reduce((maxPatient, currentPatient) => {\n          const currentSeverity = parseInt(currentPatient.diseaseSeverity, 10);  // Convertim la numƒÉr\n          if (!maxPatient || currentSeverity > parseInt(maxPatient.diseaseSeverity, 10)) {\n            return currentPatient; // ActualizƒÉm pacientul cu cel mai mare diseaseSeverity\n          }\n          return maxPatient;\n        }, null);\n      \n        if (patientWithHighestSeverity) {\n          console.log(\"Pacientul cu cel mai mare diseaseSeverity este:\", patientWithHighestSeverity);\n          setSelectedPatient(patientWithHighestSeverity); // SeteazƒÉ pacientul √Æn starea aplica»õiei\n      \n          alert(`Pacientul selectat pentru transplant: ${patientWithHighestSeverity.address}`);\n        } else {\n          alert(\"Nu s-a gƒÉsit niciun pacient cu diseaseSeverity valid.\");\n        }\n      };\n      \n      await selectPatientWithHighestSeverity();\n      \n      \n      console.log(\"All Patient Data:\", allPatientData);\n      return allPatientData;\n      // üî• ApeleazƒÉ fetchDonorAddress DOAR dupƒÉ ce organNFT este setat!\n      await fetchDonorAddress(organNFT);\n  \n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  \n\n\n  const fetchDonorAddress = async (organNFT) => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n  \n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n  \n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  \n\n\nconst addPatientHandler = async () => {\n  if (!account) {\n    alert(\"Please connect your wallet.\");\n    return;\n  }\n\n  const doctorAddress = await patientRegistry.doctor();\n  if (account !== doctorAddress) {\n    alert(\"Only the doctor can add patients.\");\n    return;\n  }\n\n  const patientAddress = prompt(\"Enter patient's address:\");\n  if (!ethers.utils.isAddress(patientAddress)) {\n    alert(\"Invalid address.\");\n    return;\n  }\n\n  const patientInfo = prompt(\"Enter patient information:\");\n  const bloodType = prompt(\"Enter patient bloodType:\");\n  const diseaseSeverity = prompt(\"Enter patient diseaseSeverity:\");\n  const surgicalRisk = prompt(\"Enter patient surgicalRisk:\");\n  const secretKey = \"your-secret-key\";  // Cheia secretƒÉ folositƒÉ pentru criptare\n  const encryptedInfo = AES.encrypt(patientInfo, secretKey).toString();  // CriptƒÉm info pacientului\n  const encryptedBloodType = AES.encrypt(bloodType, secretKey).toString();  // CriptƒÉm bloodType\n  const encryptedDiseaseSeverity = AES.encrypt(diseaseSeverity, secretKey).toString();  // CriptƒÉm diseaseSeverity\n  const encryptedSurgicalRisk = AES.encrypt(surgicalRisk, secretKey).toString();  // CriptƒÉm surgicalRisk\n  console.log(\"Encrypted Info:\", encryptedInfo);\n\n\n  try {\n    const signer = provider.getSigner();\n    const patientRegistryWithSigner = patientRegistry.connect(signer);\n    console.log(\"patientRegistryWithSigner!!!!\", patientRegistryWithSigner.address);\n    const tx = await patientRegistryWithSigner.addPatient(patientAddress, encryptedInfo,bloodType,diseaseSeverity,surgicalRisk);\n    await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n    alert(`Patient ${patientAddress} added successfully`);\n\n    // üõ† ActualizƒÉm manual lista pacien»õilor\n    const updatedPatients = await patientRegistry.getPatientList();\n    setPatients(updatedPatients); // üî• Acum pacien»õii sunt actualiza»õi √Æn interfa»õƒÉ\n  } catch (error) {\n    console.error(\"Error adding patient:\", error);\n    alert(\"Failed to add patient.\");\n  }\n};\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  const togglePop = (home) => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n\n  return (\n    <div>\n    {/* Butonul care apeleazƒÉ func»õia selectPatientWithHighestSeverity */}\n    <button\n      onClick={selectPatientWithHighestSeverity}\n      className=\"bg-blue-500 text-white p-2 rounded-md\"\n    >\n      Select Patient with Highest Disease Severity\n    </button>\n\n    {/* Afi»ôeazƒÉ pacientul selectat */}\n    {selectedPatient && (\n      <div>\n        <h3>Selected Patient for Transplant:</h3>\n        <p><strong>Address:</strong> {selectedPatient.address}</p>\n        <p><strong>Info:</strong> {selectedPatient.info}</p>\n        <p><strong>Blood Type:</strong> {selectedPatient.bloodType}</p>\n        <p><strong>Disease Severity:</strong> {selectedPatient.diseaseSeverity}</p>\n        <p><strong>Surgical Risk:</strong> {selectedPatient.surgicalRisk}</p>\n      </div>\n    )}\n  </div> ,\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n      <Search />\n\n      <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n        <p className=\"text-4xl font-bold\">Organs For You</p>\n        {account && organNFT && (\n          <div className=\"mt-5\">\n            <h3 className=\"text-xl font-bold\">Donate an Organ</h3>\n            <AddOrgan organNFT={organNFT} provider={provider} account={account} donorAddress={donorAddress} />\n          </div>\n        )}\n      {/* Buton pentru a adƒÉuga pacienti */}\n      {account && (\n        <div>\n          <button\n            onClick={addPatientHandler}\n            className=\"bg-green-500 text-white p-2 rounded-md\"\n          >\n            Add Patient\n          </button>\n\n          \n\n        </div>\n      )}\n\n      \n\n<div className=\"mt-5\">\n    <h3 className=\"text-xl font-bold\">Patients List</h3>\n    <ul className=\"list-disc mt-2\">\n      {patients.length === 0 ? (\n        <li>No patients added yet.</li>\n      ) : (\n        patients.map((patientAddress, index) => (\n          <li key={index}>\n            <p>{`${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`}</p>\n          </li>\n        ))\n      )}\n    </ul>\n  </div>\n  {/* Buton pentru a selecta pacientul cu cel mai mare `diseaseSeverity` */}\n  <div className=\"mt-5\">\n          <button\n            onClick={selectPatientWithHighestSeverity}\n            className=\"bg-blue-500 text-white p-2 rounded-md\"\n          >\n            Select Patient with Highest Disease Severity\n          </button>\n        </div>\n\n        {/* Afi»ôeazƒÉ pacientul selectat */}\n        {selectedPatient && (\n          <div className=\"mt-5\">\n            <h3>Selected Patient for Transplant:</h3>\n            <p><strong>Address:</strong> {selectedPatient.address}</p>\n            <p><strong>Info:</strong> {selectedPatient.info}</p>\n            <p><strong>Blood Type:</strong> {selectedPatient.bloodType}</p>\n            <p><strong>Disease Severity:</strong> {selectedPatient.diseaseSeverity}</p>\n            <p><strong>Surgical Risk:</strong> {selectedPatient.surgicalRisk}</p>\n          </div>\n        )}\n  <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n  <p className=\"text-4xl font-bold\">Organs For You</p>\n  <div className=\"flex justify-center space-x-5 p-1\">\n    {!organs.length ? (\n      <p>Loading...</p>\n    ) : (\n      organs.map((organ, index) => (\n        organ && organ.attributes ? (\n          <div key={index} className=\"rounded-lg shadow-xl\" onClick={() => togglePop(organ)}>\n            <div>\n              <img src={organ.image || \"fallback.jpg\"} className=\"w-[350px] h-auto rounded-t-lg\" />\n            </div>\n            <div className=\"p-3\">\n              <p><strong>Organ:</strong> {organ.organ || \"N/A\"}</p>\n              <p><strong>Blood Type:</strong> {organ.BloodType || organ.attributes?.find(attr => attr.trait_type === \"Blood Type\")?.value || \"N/A\"}</p>\n              <p><strong>Description:</strong> {organ.description || \"No description\"}</p>\n              <p><strong>ID:</strong> {organ.id}</p>\n              \n              {/* Afi»ôeazƒÉ toate atributele disponibile */}\n              <div className=\"mt-2\">\n                <strong>Attributes:</strong>\n                <ul>\n                  {organ.attributes.map((attr, i) => (\n                    <li key={i}>{attr.trait_type}: {attr.value}</li>\n                  ))}\n                </ul>\n              </div>\n            </div>\n          </div>\n        ) : null\n      ))\n    )}\n  </div>\n</div>\n\n\n      </div>\n\n      {toggle && (\n        <Home organ={organ} provider={provider} account={account} escrow={escrow} togglePop={togglePop} />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}