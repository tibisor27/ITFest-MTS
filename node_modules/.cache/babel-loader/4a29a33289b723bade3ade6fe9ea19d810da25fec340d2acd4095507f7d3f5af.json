{"ast":null,"code":"const fetchDetails = async () => {\n  const donor = await escrow.donor();\n  const doctor = await escrow.doctor();\n  const patient = await escrow.patient();\n  const organId = await escrow.organNFT();\n  const doctorApproved = await escrow.doctorApproved();\n  const owners = await escrow.getOwners();\n  setDonor(donor);\n  setDoctor(doctor);\n  setPatient(patient);\n  setOrganId(organId.toString());\n  setDoctorApproved(doctorApproved);\n  setCurrentOwner(owners[0]);\n  setFutureOwner(owners[1]);\n\n  // Verificăm dacă avem adresa contractului NFT și provider\n  if (!organId || !provider) {\n    console.error(\"Organ NFT ID sau provider lipsă!\");\n    return;\n  }\n  try {\n    // Obținem contractul NFT\n    const nftContract = new ethers.Contract(await escrow.organNFT(),\n    // Adresa contractului NFT\n    [\"function tokenURI(uint256 tokenId) external view returns (string memory)\"], provider);\n\n    // Preluăm metadata de pe IPFS\n    const tokenURI = await nftContract.tokenURI(organId);\n    const response = await fetch(tokenURI);\n    const metadata = await response.json();\n    setNftAttributes(metadata.attributes);\n  } catch (error) {\n    console.error(\"Eroare la obținerea datelor NFT:\", error);\n  }\n};","map":{"version":3,"names":["fetchDetails","donor","escrow","doctor","patient","organId","organNFT","doctorApproved","owners","getOwners","setDonor","setDoctor","setPatient","setOrganId","toString","setDoctorApproved","setCurrentOwner","setFutureOwner","provider","console","error","nftContract","ethers","Contract","tokenURI","response","fetch","metadata","json","setNftAttributes","attributes"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/Home.js"],"sourcesContent":["const fetchDetails = async () => {\n  const donor = await escrow.donor();\n  const doctor = await escrow.doctor();\n  const patient = await escrow.patient();\n  const organId = await escrow.organNFT();\n  const doctorApproved = await escrow.doctorApproved();\n  const owners = await escrow.getOwners();\n\n  setDonor(donor);\n  setDoctor(doctor);\n  setPatient(patient);\n  setOrganId(organId.toString());\n  setDoctorApproved(doctorApproved);\n  setCurrentOwner(owners[0]);\n  setFutureOwner(owners[1]);\n\n  // Verificăm dacă avem adresa contractului NFT și provider\n  if (!organId || !provider) {\n    console.error(\"Organ NFT ID sau provider lipsă!\");\n    return;\n  }\n\n  try {\n    // Obținem contractul NFT\n    const nftContract = new ethers.Contract(\n      await escrow.organNFT(), // Adresa contractului NFT\n      [\n        \"function tokenURI(uint256 tokenId) external view returns (string memory)\"\n      ],\n      provider\n    );\n\n    // Preluăm metadata de pe IPFS\n    const tokenURI = await nftContract.tokenURI(organId);\n    const response = await fetch(tokenURI);\n    const metadata = await response.json();\n    setNftAttributes(metadata.attributes);\n  } catch (error) {\n    console.error(\"Eroare la obținerea datelor NFT:\", error);\n  }\n};\n"],"mappings":"AAAA,MAAMA,YAAY,GAAG,MAAAA,CAAA,KAAY;EAC/B,MAAMC,KAAK,GAAG,MAAMC,MAAM,CAACD,KAAK,CAAC,CAAC;EAClC,MAAME,MAAM,GAAG,MAAMD,MAAM,CAACC,MAAM,CAAC,CAAC;EACpC,MAAMC,OAAO,GAAG,MAAMF,MAAM,CAACE,OAAO,CAAC,CAAC;EACtC,MAAMC,OAAO,GAAG,MAAMH,MAAM,CAACI,QAAQ,CAAC,CAAC;EACvC,MAAMC,cAAc,GAAG,MAAML,MAAM,CAACK,cAAc,CAAC,CAAC;EACpD,MAAMC,MAAM,GAAG,MAAMN,MAAM,CAACO,SAAS,CAAC,CAAC;EAEvCC,QAAQ,CAACT,KAAK,CAAC;EACfU,SAAS,CAACR,MAAM,CAAC;EACjBS,UAAU,CAACR,OAAO,CAAC;EACnBS,UAAU,CAACR,OAAO,CAACS,QAAQ,CAAC,CAAC,CAAC;EAC9BC,iBAAiB,CAACR,cAAc,CAAC;EACjCS,eAAe,CAACR,MAAM,CAAC,CAAC,CAAC,CAAC;EAC1BS,cAAc,CAACT,MAAM,CAAC,CAAC,CAAC,CAAC;;EAEzB;EACA,IAAI,CAACH,OAAO,IAAI,CAACa,QAAQ,EAAE;IACzBC,OAAO,CAACC,KAAK,CAAC,kCAAkC,CAAC;IACjD;EACF;EAEA,IAAI;IACF;IACA,MAAMC,WAAW,GAAG,IAAIC,MAAM,CAACC,QAAQ,CACrC,MAAMrB,MAAM,CAACI,QAAQ,CAAC,CAAC;IAAE;IACzB,CACE,0EAA0E,CAC3E,EACDY,QACF,CAAC;;IAED;IACA,MAAMM,QAAQ,GAAG,MAAMH,WAAW,CAACG,QAAQ,CAACnB,OAAO,CAAC;IACpD,MAAMoB,QAAQ,GAAG,MAAMC,KAAK,CAACF,QAAQ,CAAC;IACtC,MAAMG,QAAQ,GAAG,MAAMF,QAAQ,CAACG,IAAI,CAAC,CAAC;IACtCC,gBAAgB,CAACF,QAAQ,CAACG,UAAU,CAAC;EACvC,CAAC,CAAC,OAAOV,KAAK,EAAE;IACdD,OAAO,CAACC,KAAK,CAAC,kCAAkC,EAAEA,KAAK,CAAC;EAC1D;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}