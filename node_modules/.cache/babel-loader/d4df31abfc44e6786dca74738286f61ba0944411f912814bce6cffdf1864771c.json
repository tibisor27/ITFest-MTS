{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/hackaton/ITFest-MTS/src/App.js\",\n  _s2 = $RefreshSig$();\nimport { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\nimport CryptoJS from \"crypto-js\";\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst secretKey = \"rosibes2712\";\nfunction App() {\n  _s2();\n  var _s = $RefreshSig$();\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [showForm, setShowForm] = useState(false); // Stare pentru a afi»ôa/ascunde formularul\n  const [patientData, setPatientData] = useState({\n    address: \"\",\n    name: \"\",\n    prenume: \"\",\n    cnp: \"\",\n    organType: \"\",\n    bloodType: \"\",\n    sex: \"\",\n    age: \"\",\n    greutate: \"\",\n    inaltime: \"\",\n    istoricMedical: \"\",\n    deseaseSeverity: \"\",\n    surgicalRisk: \"\",\n    medicalHistory: \"\"\n  });\n  const [decryptedPatientData, setDecryptedPatientData] = useState(null);\n  const [accessRequests, setAccessRequests] = useState([]);\n  const handleInputChange = e => {\n    const {\n      name,\n      value\n    } = e.target;\n    setPatientData(prevData => ({\n      ...prevData,\n      [name]: value\n    }));\n    console.log(`Updated ${name}:`, value); // Afi»ôeazƒÉ c√¢mpul actualizat\n  };\n  const handleSubmit = async e => {\n    e.preventDefault();\n    console.log(\"Patient Data to be submitted:\", patientData); // Afi»ôeazƒÉ datele pacientului\n    const {\n      address,\n      ...details\n    } = patientData;\n    await addPatientHandler(address, details);\n    setShowForm(false);\n    setPatientData({\n      address: \"\",\n      name: \"\",\n      bloodType: \"\",\n      sex: \"\",\n      age: \"\"\n    });\n  };\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n    try {\n      var _config$network$chain, _config$network$chain2;\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n      setAccount(account);\n      setProvider(provider);\n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n      window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.ethereum.request({\n          method: 'eth_requestAccounts'\n        });\n        const account = ethers.utils.getAddress(accounts[0]);\n        setAccount(account);\n      });\n      const organNFTAddress = (_config$network$chain = config[network.chainId]) === null || _config$network$chain === void 0 ? void 0 : (_config$network$chain2 = _config$network$chain.organNFT) === null || _config$network$chain2 === void 0 ? void 0 : _config$network$chain2.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n      const waitingList = new ethers.Contract(config[network.chainId].waitingList.address, WaitingList, provider);\n\n      // √éncarcƒÉ ambele contracte OrganEscrow\n      const escrowContracts = config[network.chainId].escrow.map(escrowConfig => {\n        return new ethers.Contract(escrowConfig.address, OrganEscrow, provider);\n      });\n      setEscrow(escrowContracts); // SeteazƒÉ un array de contracte\n\n      const patientRegistry = new ethers.Contract(config[network.chainId].patientRegistry.address, PatientRegistry, provider);\n      setWaitingList(waitingList);\n      setPatientRegistry(patientRegistry);\n      console.log(\"üìú Contracte ini»õializate!\");\n\n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          metadata.escrowAddress = config[network.chainId].escrow[i - 1].address; // AsociazƒÉ contractul OrganEscrow\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n      setOrgans(fetchedOrgans);\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n\n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n      await fetchDonorAddress(organNFT);\n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  const fetchDonorAddress = async organNFT => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  const requestAccess = async patientAddress => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.requestAccess(patientAddress);\n      await tx.wait();\n      alert(\"Access request sent successfully!\");\n    } catch (error) {\n      console.error(\"Error requesting access:\", error);\n      alert(\"Failed to request access.\");\n    }\n  };\n  const approveAccess = async (doctorAddress, approved) => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.approveAccess(doctorAddress, approved);\n      await tx.wait();\n      alert(`Access ${approved ? \"approved\" : \"rejected\"} successfully!`);\n    } catch (error) {\n      console.error(\"Error approving access:\", error);\n      alert(\"Failed to approve access.\");\n    }\n  };\n  const loadAccessRequests = async patientAddress => {\n    if (!account || !patientRegistry) {\n      console.error(\"Account or PatientRegistry not initialized.\");\n      return;\n    }\n    try {\n      // √éncarcƒÉ cererile de acces pentru pacientul curent\n      const requests = await patientRegistry.getAccessRequests(patientAddress);\n      setAccessRequests(requests);\n    } catch (error) {\n      console.error(\"Error loading access requests:\", error);\n    }\n  };\n  const AccessRequests = ({\n    patientAddress\n  }) => {\n    _s();\n    const [requests, setRequests] = useState([]);\n    useEffect(() => {\n      const loadRequests = async () => {\n        if (patientAddress) {\n          const requests = await patientRegistry.getAccessRequests(patientAddress);\n          setRequests(requests);\n        }\n      };\n      loadRequests();\n    }, [patientAddress]);\n  };\n  _s(AccessRequests, \"MIcAFnHRaJFubpcUtYXSDqOxSqY=\");\n  const encryptData = (data, secret) => {\n    return CryptoJS.AES.encrypt(JSON.stringify(data), secret).toString();\n  };\n  const addPatientHandler = async (patientAddress, patientInfo) => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n    const doctorAddress = await patientRegistry.doctor();\n    if (account !== doctorAddress) {\n      alert(\"Only the doctor can add patients.\");\n      return;\n    }\n    if (!ethers.utils.isAddress(patientAddress)) {\n      alert(\"Invalid address.\");\n      return;\n    }\n    try {\n      const encryptedPatientInfo = encryptData(patientInfo, secretKey);\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n      const tx = await patientRegistryWithSigner.addPatient(patientAddress, encryptedPatientInfo);\n      console.log(\"adresa pacient:\", patientAddress);\n      console.log(\"patiennt info:\", patientInfo);\n      console.log(\"patiennt data:\", patientData);\n      console.log(\"ecnrypted patient info:\", encryptedPatientInfo);\n      await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n      alert(`Patient ${patientAddress} added successfully`);\n\n      // üõ† Re√ÆncarcƒÉ lista de pacien»õi dupƒÉ adƒÉugare\n      const updatedPatients = await patientRegistry.getPatientList();\n      setPatients(updatedPatients); // üî• ActualizeazƒÉ starea cu noua listƒÉ de pacien»õi\n    } catch (error) {\n      console.error(\"Error adding patient:\", error);\n      alert(\"Failed to add patient.\");\n    }\n  };\n  const decryptData = (encryptedData, secret) => {\n    try {\n      const bytes = CryptoJS.AES.decrypt(encryptedData, secret);\n      return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n    } catch (error) {\n      console.error(\"Decryption failed:\", error);\n      return null;\n    }\n  };\n\n  // Exemplu de utilizare pentru a afi»ôa detaliile pacientului\n  const fetchPatientData = async patientAddress => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n\n    // VerificƒÉ dacƒÉ medicul are acces la datele pacientului\n    const hasAccess = await patientRegistry.hasAccess(account, patientAddress);\n    if (!hasAccess) {\n      alert(\"You do not have access to this patient's data. Please request access.\");\n      return;\n    }\n    const userInputKey = prompt(\"Enter the secret key to view details:\");\n    if (userInputKey !== secretKey) {\n      alert(\"Incorrect secret key!\");\n      return;\n    }\n    try {\n      const patient = await patientRegistry.patients(patientAddress);\n      const decryptedData = decryptData(patient.patientInfo, secretKey);\n      if (decryptedData) {\n        setDecryptedPatientData(decryptedData);\n        console.log(\"Decrypted Patient Data:\", decryptedData);\n      } else {\n        alert(\"Failed to decrypt patient data.\");\n      }\n    } catch (error) {\n      console.error(\"Error fetching patient data:\", error);\n    }\n  };\n  const findPatientByCriteria = async criteria => {\n    if (!patientRegistry) {\n      console.error(\"‚ùå Contractul PatientRegistry nu este ini»õializat!\");\n      return null;\n    }\n    try {\n      const patientList = await patientRegistry.getPatientList();\n      for (const patientAddress of patientList) {\n        const patient = await patientRegistry.patients(patientAddress);\n        const decryptedData = decryptData(patient.patientInfo, secretKey);\n        if (decryptedData && decryptedData.bloodType === criteria.bloodType) {\n          console.log(\"‚úÖ Pacient gƒÉsit:\", decryptedData);\n          return {\n            address: patientAddress,\n            ...decryptedData\n          };\n        }\n      }\n      console.warn(\"‚ö†Ô∏è Niciun pacient nu corespunde criteriului.\");\n      return null;\n    } catch (error) {\n      console.error(\"‚ùå Eroare la cƒÉutarea pacientului:\", error);\n      return null;\n    }\n  };\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n  const togglePop = home => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navigation, {\n      account: account,\n      setAccount: setAccount\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 402,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Search, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"p-7 flex flex-col gap-y-6 items-center\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"text-4xl font-bold\",\n        children: \"Organs For You\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 406,\n        columnNumber: 9\n      }, this), account && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => setShowForm(true),\n          className: \"bg-green-500 text-white p-2 rounded-md\",\n          children: \"Add Patient\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 411,\n          columnNumber: 13\n        }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"mt-4 p-4 border rounded-lg bg-gray-100\",\n          children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n            className: \"text-lg font-bold mb-2\",\n            children: \"Add New Patient\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 420,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n            onSubmit: handleSubmit\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 421,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 15\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 410,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mt-5\",\n        children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n          className: \"text-xl font-bold\",\n          children: \"Patients List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 431,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          className: \"list-disc mt-2\",\n          children: patients.length === 0 ? /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"No patients added yet.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 434,\n            columnNumber: 15\n          }, this) : patients.map((patientAddress, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n            className: \"flex items-center space-x-4\",\n            children: [/*#__PURE__*/_jsxDEV(\"p\", {\n              children: `${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 438,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => fetchPatientData(patientAddress),\n              className: \"bg-blue-500 text-white p-1 rounded-md text-sm\",\n              children: \"View Details\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 439,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              onClick: () => requestAccess(patientAddress),\n              className: \"bg-green-500 text-white p-1 rounded-md text-sm\",\n              children: \"Request Access\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 19\n            }, this)]\n          }, index, true, {\n            fileName: _jsxFileName,\n            lineNumber: 437,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 432,\n          columnNumber: 11\n        }, this), account && patients.includes(account) && /*#__PURE__*/_jsxDEV(AccessRequests, {\n          patientAddress: account\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 430,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 405,\n      columnNumber: 7\n    }, this), toggle && /*#__PURE__*/_jsxDEV(Home, {\n      organ: organ,\n      provider: provider,\n      account: account,\n      escrow: escrow,\n      togglePop: togglePop,\n      organs: organs,\n      findPatientByCriteria: findPatientByCriteria\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 465,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 401,\n    columnNumber: 5\n  }, this);\n}\n_s2(App, \"OjiTgeEvbF8gNbZqgYWJh2apZZ0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["useEffect","useState","ethers","logo","AddOrgan","uploadToPinata","CryptoJS","OrganNFT","OrganEscrow","WaitingList","PatientRegistry","config","Navigation","Search","Home","jsxDEV","_jsxDEV","secretKey","App","_s2","_s","$RefreshSig$","account","setAccount","provider","setProvider","organNFT","setOrganNFT","waitingList","setWaitingList","escrow","setEscrow","organs","setOrgans","organ","setOrgan","toggle","setToggle","patientRegistry","setPatientRegistry","patients","setPatients","donorAddress","setDonorAddress","showForm","setShowForm","patientData","setPatientData","address","name","prenume","cnp","organType","bloodType","sex","age","greutate","inaltime","istoricMedical","deseaseSeverity","surgicalRisk","medicalHistory","decryptedPatientData","setDecryptedPatientData","accessRequests","setAccessRequests","handleInputChange","e","value","target","prevData","console","log","handleSubmit","preventDefault","details","addPatientHandler","loadBlockchainData","window","ethereum","error","_config$network$chain","_config$network$chain2","providers","Web3Provider","send","signer","getSigner","getAddress","network","getNetwork","chainId","on","accounts","request","method","utils","organNFTAddress","Contract","escrowContracts","map","escrowConfig","totalSupply","toString","fetchedOrgans","i","uri","tokenURI","startsWith","response","fetch","metadata","json","escrowAddress","push","patientList","getPatientList","fetchDonorAddress","donor","getDonor","warn","requestAccess","patientAddress","alert","patientRegistryWithSigner","connect","tx","wait","approveAccess","doctorAddress","approved","loadAccessRequests","requests","getAccessRequests","AccessRequests","setRequests","loadRequests","encryptData","data","secret","AES","encrypt","JSON","stringify","patientInfo","doctor","isAddress","encryptedPatientInfo","addPatient","updatedPatients","decryptData","encryptedData","bytes","decrypt","parse","enc","Utf8","fetchPatientData","hasAccess","userInputKey","prompt","patient","decryptedData","findPatientByCriteria","criteria","togglePop","home","children","fileName","_jsxFileName","lineNumber","columnNumber","className","onClick","onSubmit","length","index","slice","includes","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/hackaton/ITFest-MTS/src/App.js"],"sourcesContent":["import { useEffect, useState } from \"react\";\nimport { ethers } from \"ethers\"; // AsigurƒÉ-te cƒÉ folose»ôti v5 corect instalat\nimport logo from \"./assets/logo1.png\";\nimport AddOrgan from \"./components/AddOrgan\";\nimport { uploadToPinata } from \"./utils/pinata\";\nimport CryptoJS from \"crypto-js\";\n\n\n\n// ABIs\nimport OrganNFT from \"./abis/OrganNFT.json\";\nimport OrganEscrow from \"./abis/OrganEscrow.json\";\nimport WaitingList from \"./abis/WaitingList.json\";\nimport PatientRegistry from './abis/PatientRegistry.json';\n\n// Config\nimport config from \"./config.json\";\nimport Navigation from \"./components/Navigation\";\nimport Search from \"./components/Search\";\nimport Home from \"./components/Home\";\n\n\nconst secretKey = \"rosibes2712\";\nfunction App() {\n  const [account, setAccount] = useState(null);\n  const [provider, setProvider] = useState(null);\n  const [organNFT, setOrganNFT] = useState(null);\n  const [waitingList, setWaitingList] = useState(null);\n  const [escrow, setEscrow] = useState(null);\n  const [organs, setOrgans] = useState([]);\n  const [organ, setOrgan] = useState([]);\n  const [toggle, setToggle] = useState(false);\n  const [patientRegistry, setPatientRegistry] = useState(null);\n  const [patients, setPatients] = useState([]); // Lista pacien»õilor adƒÉuga»õi\n  const [donorAddress, setDonorAddress] = useState(null);\n  const [showForm, setShowForm] = useState(false); // Stare pentru a afi»ôa/ascunde formularul\n  const [patientData, setPatientData] = useState({\n    address: \"\",\n    name: \"\",\n    prenume: \"\",\n    cnp: \"\",\n    organType: \"\",\n    bloodType: \"\",\n    sex: \"\",\n    age: \"\",\n    greutate: \"\",\n    inaltime: \"\",\n    istoricMedical:\"\",\n    deseaseSeverity: \"\",\n    surgicalRisk: \"\",\n    medicalHistory: \"\",\n    \n  });\n  const [decryptedPatientData, setDecryptedPatientData] = useState(null);\n  const [accessRequests, setAccessRequests] = useState([]);\n\n  const handleInputChange = (e) => {\n    const { name, value } = e.target;\n    setPatientData((prevData) => ({\n      ...prevData,\n      [name]: value,\n    }));\n    console.log(`Updated ${name}:`, value); // Afi»ôeazƒÉ c√¢mpul actualizat\n  };\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    console.log(\"Patient Data to be submitted:\", patientData); // Afi»ôeazƒÉ datele pacientului\n    const { address, ...details } = patientData;\n    await addPatientHandler(address, details);\n    setShowForm(false);\n    setPatientData({ address: \"\", name: \"\", bloodType: \"\", sex: \"\", age: \"\" });\n  };\n\n\n  const loadBlockchainData = async () => {\n    console.log(\"üöÄ loadBlockchainData called!\");\n  \n    if (!window.ethereum) {\n      console.error(\"‚ùå MetaMask nu este instalat!\");\n      return;\n    }\n  \n    try {\n      const provider = new ethers.providers.Web3Provider(window.ethereum);\n      await provider.send(\"eth_requestAccounts\", []);\n      const signer = provider.getSigner();\n      const account = await signer.getAddress();\n  \n      setAccount(account);\n      setProvider(provider);\n  \n      const network = await provider.getNetwork();\n      if (!config[network.chainId]) {\n        console.error(\"‚ùå Chain ID not found in config:\", network.chainId);\n        return;\n      }\n  \n      window.ethereum.on('accountsChanged', async () => {\n        const accounts = await window.ethereum.request({ method: 'eth_requestAccounts' });\n        const account = ethers.utils.getAddress(accounts[0]);\n        setAccount(account);\n      });\n  \n      const organNFTAddress = config[network.chainId]?.organNFT?.address;\n      if (!organNFTAddress) {\n        console.error(\"‚ùå Adresa OrganNFT este undefined! VerificƒÉ config.json\");\n        return;\n      }\n  \n      const organNFT = new ethers.Contract(organNFTAddress, OrganNFT, signer);\n      setOrganNFT(organNFT);\n  \n      const waitingList = new ethers.Contract(\n        config[network.chainId].waitingList.address,\n        WaitingList,\n        provider\n      );\n  \n      // √éncarcƒÉ ambele contracte OrganEscrow\n      const escrowContracts = config[network.chainId].escrow.map(escrowConfig => {\n        return new ethers.Contract(escrowConfig.address, OrganEscrow, provider);\n      });\n      setEscrow(escrowContracts); // SeteazƒÉ un array de contracte\n  \n      const patientRegistry = new ethers.Contract(\n        config[network.chainId].patientRegistry.address,\n        PatientRegistry,\n        provider\n      );\n  \n      setWaitingList(waitingList);\n      setPatientRegistry(patientRegistry);\n  \n      console.log(\"üìú Contracte ini»õializate!\");\n  \n      // Fetch NFTs\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total Supply:\", totalSupply.toString());\n  \n      let fetchedOrgans = [];\n      for (let i = 1; i <= totalSupply; i++) {\n        const uri = await organNFT.tokenURI(i);\n        if (!uri.startsWith(\"http\")) continue;\n        try {\n          const response = await fetch(uri);\n          const metadata = await response.json();\n          metadata.escrowAddress = config[network.chainId].escrow[i - 1].address; // AsociazƒÉ contractul OrganEscrow\n          fetchedOrgans.push(metadata);\n        } catch (error) {\n          console.error(\"‚ö†Ô∏è Eroare la √ÆncƒÉrcarea NFT:\", error);\n        }\n      }\n      setOrgans(fetchedOrgans);\n      console.log(\"‚úÖ Organs loaded:\", fetchedOrgans);\n  \n      // Load patients\n      const patientList = await patientRegistry.getPatientList();\n      setPatients(patientList);\n      console.log(\"‚úÖ Patients loaded:\", patientList);\n  \n      await fetchDonorAddress(organNFT);\n    } catch (error) {\n      console.error(\"‚ùå Eroare √Æn loadBlockchainData:\", error);\n    }\n  };\n  \n\n\n  const fetchDonorAddress = async (organNFT) => {\n    if (!organNFT) {\n      console.error(\"‚ùå organNFT nu este ini»õializat!\");\n      return;\n    }\n  \n    try {\n      const totalSupply = await organNFT.totalSupply();\n      console.log(\"üè¶ Total NFT Supply:\", totalSupply.toString());\n  \n      if (totalSupply > 0) {\n        const donor = await organNFT.getDonor(1); // ü©∏ Donor pentru primul NFT\n        setDonorAddress(donor);\n        console.log(\"üéó Donor Address setat:\", donor);\n      } else {\n        console.warn(\"‚ö†Ô∏è Nu existƒÉ NFT-uri, donorAddress rƒÉm√¢ne null.\");\n      }\n    } catch (error) {\n      console.error(\"‚ùå Eroare la ob»õinerea donorului:\", error);\n    }\n  };\n  \n  const requestAccess = async (patientAddress) => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n  \n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n  \n      const tx = await patientRegistryWithSigner.requestAccess(patientAddress);\n      await tx.wait();\n  \n      alert(\"Access request sent successfully!\");\n    } catch (error) {\n      console.error(\"Error requesting access:\", error);\n      alert(\"Failed to request access.\");\n    }\n  };\n\n  const approveAccess = async (doctorAddress, approved) => {\n    if (!account) {\n      alert(\"Please connect your wallet.\");\n      return;\n    }\n  \n    try {\n      const signer = provider.getSigner();\n      const patientRegistryWithSigner = patientRegistry.connect(signer);\n  \n      const tx = await patientRegistryWithSigner.approveAccess(doctorAddress, approved);\n      await tx.wait();\n  \n      alert(`Access ${approved ? \"approved\" : \"rejected\"} successfully!`);\n    } catch (error) {\n      console.error(\"Error approving access:\", error);\n      alert(\"Failed to approve access.\");\n    }\n  };\n\n  const loadAccessRequests = async (patientAddress) => {\n    if (!account || !patientRegistry) {\n      console.error(\"Account or PatientRegistry not initialized.\");\n      return;\n    }\n  \n    try {\n      // √éncarcƒÉ cererile de acces pentru pacientul curent\n      const requests = await patientRegistry.getAccessRequests(patientAddress);\n      setAccessRequests(requests);\n    } catch (error) {\n      console.error(\"Error loading access requests:\", error);\n    }\n  };\n\n\n\n  const AccessRequests = ({ patientAddress }) => {\n  const [requests, setRequests] = useState([]);\n\n  useEffect(() => {\n    const loadRequests = async () => {\n      if (patientAddress) {\n        const requests = await patientRegistry.getAccessRequests(patientAddress);\n        setRequests(requests);\n      }\n    };\n\n    loadRequests();\n  }, [patientAddress]);\n\n\n};\n\n  const encryptData = (data, secret) => {\n    return CryptoJS.AES.encrypt(JSON.stringify(data), secret).toString();\n  };\n  \n\n\nconst addPatientHandler = async (patientAddress, patientInfo) => {\n  if (!account) {\n    alert(\"Please connect your wallet.\");\n    return;\n  }\n\n  const doctorAddress = await patientRegistry.doctor();\n  if (account !== doctorAddress) {\n    alert(\"Only the doctor can add patients.\");\n    return;\n  }\n\n  if (!ethers.utils.isAddress(patientAddress)) {\n    alert(\"Invalid address.\");\n    return;\n  }\n\n  try {\n    const encryptedPatientInfo = encryptData(patientInfo, secretKey);\n\n    const signer = provider.getSigner();\n    const patientRegistryWithSigner = patientRegistry.connect(signer);\n\n    const tx = await patientRegistryWithSigner.addPatient(patientAddress, encryptedPatientInfo);\n    console.log(\"adresa pacient:\", patientAddress);\n    console.log(\"patiennt info:\", patientInfo);\n    console.log(\"patiennt data:\", patientData);\n    console.log(\"ecnrypted patient info:\", encryptedPatientInfo);\n\n    await tx.wait(); // üî• A»ôteptƒÉm confirmarea tranzac»õiei\n    alert(`Patient ${patientAddress} added successfully`);\n\n    // üõ† Re√ÆncarcƒÉ lista de pacien»õi dupƒÉ adƒÉugare\n    const updatedPatients = await patientRegistry.getPatientList();\n    setPatients(updatedPatients); // üî• ActualizeazƒÉ starea cu noua listƒÉ de pacien»õi\n  } catch (error) {\n    console.error(\"Error adding patient:\", error);\n    alert(\"Failed to add patient.\");\n  }\n};\n\nconst decryptData = (encryptedData, secret) => {\n  try {\n    const bytes = CryptoJS.AES.decrypt(encryptedData, secret);\n    return JSON.parse(bytes.toString(CryptoJS.enc.Utf8));\n  } catch (error) {\n    console.error(\"Decryption failed:\", error);\n    return null;\n  }\n};\n\n// Exemplu de utilizare pentru a afi»ôa detaliile pacientului\nconst fetchPatientData = async (patientAddress) => {\n  if (!account) {\n    alert(\"Please connect your wallet.\");\n    return;\n  }\n\n  // VerificƒÉ dacƒÉ medicul are acces la datele pacientului\n  const hasAccess = await patientRegistry.hasAccess(account, patientAddress);\n  if (!hasAccess) {\n    alert(\"You do not have access to this patient's data. Please request access.\");\n    return;\n  }\n\n  const userInputKey = prompt(\"Enter the secret key to view details:\");\n\n  if (userInputKey !== secretKey) {\n    alert(\"Incorrect secret key!\");\n    return;\n  }\n\n  try {\n    const patient = await patientRegistry.patients(patientAddress);\n    const decryptedData = decryptData(patient.patientInfo, secretKey);\n\n    if (decryptedData) {\n      setDecryptedPatientData(decryptedData);\n      console.log(\"Decrypted Patient Data:\", decryptedData);\n    } else {\n      alert(\"Failed to decrypt patient data.\");\n    }\n  } catch (error) {\n    console.error(\"Error fetching patient data:\", error);\n  }\n};\n\n\nconst findPatientByCriteria = async (criteria) => {\n  if (!patientRegistry) {\n    console.error(\"‚ùå Contractul PatientRegistry nu este ini»õializat!\");\n    return null;\n  }\n\n  try {\n    const patientList = await patientRegistry.getPatientList();\n    \n    for (const patientAddress of patientList) {\n      const patient = await patientRegistry.patients(patientAddress);\n      const decryptedData = decryptData(patient.patientInfo, secretKey);\n\n\n      if (decryptedData && decryptedData.bloodType === criteria.bloodType) {\n        console.log(\"‚úÖ Pacient gƒÉsit:\", decryptedData);\n        return { address: patientAddress, ...decryptedData };\n      }\n    }\n\n\n    console.warn(\"‚ö†Ô∏è Niciun pacient nu corespunde criteriului.\");\n    return null;\n  } catch (error) {\n    console.error(\"‚ùå Eroare la cƒÉutarea pacientului:\", error);\n    return null;\n  }\n};\n\n\n\n  useEffect(() => {\n    loadBlockchainData();\n  }, []);\n\n  const togglePop = (home) => {\n    setOrgan(home);\n    setToggle(!toggle);\n  };\n\n  return (\n    <div>\n      <Navigation account={account} setAccount={setAccount} />\n      <Search />\n  \n      <div className=\"p-7 flex flex-col gap-y-6 items-center\">\n        <p className=\"text-4xl font-bold\">Organs For You</p>\n  \n        {/* Buton pentru a adƒÉuga pacien»õi */}\n        {account && (\n          <div>\n            <button\n              onClick={() => setShowForm(true)}\n              className=\"bg-green-500 text-white p-2 rounded-md\"\n            >\n              Add Patient\n            </button>\n  \n            {showForm && (\n              <div className=\"mt-4 p-4 border rounded-lg bg-gray-100\">\n                <h3 className=\"text-lg font-bold mb-2\">Add New Patient</h3>\n                <form onSubmit={handleSubmit}>\n                  {/* Formularul pentru adƒÉugarea unui pacient */}\n                </form>\n              </div>\n            )}\n          </div>\n        )}\n  \n        {/* Lista de pacien»õi */}\n        <div className=\"mt-5\">\n          <h3 className=\"text-xl font-bold\">Patients List</h3>\n          <ul className=\"list-disc mt-2\">\n            {patients.length === 0 ? (\n              <li>No patients added yet.</li>\n            ) : (\n              patients.map((patientAddress, index) => (\n                <li key={index} className=\"flex items-center space-x-4\">\n                  <p>{`${patientAddress.slice(0, 6)}...${patientAddress.slice(-4)}`}</p>\n                  <button\n                    onClick={() => fetchPatientData(patientAddress)}\n                    className=\"bg-blue-500 text-white p-1 rounded-md text-sm\"\n                  >\n                    View Details\n                  </button>\n                  <button\n                    onClick={() => requestAccess(patientAddress)}\n                    className=\"bg-green-500 text-white p-1 rounded-md text-sm\"\n                  >\n                    Request Access\n                  </button>\n                </li>\n              ))\n            )}\n          </ul>\n  \n          {/* Afi»ôeazƒÉ cererile de acces pentru pacientul curent */}\n          {account && patients.includes(account) && (\n            <AccessRequests patientAddress={account} />\n          )}\n        </div>\n      </div>\n  \n      {/* Componenta Home pentru afi»ôarea detaliilor organului */}\n      {toggle && (\n        <Home \n          organ={organ}  \n          provider={provider} \n          account={account} \n          escrow={escrow} \n          togglePop={togglePop} \n          organs={organs} \n          findPatientByCriteria={findPatientByCriteria}\n        />\n      )}\n    </div>\n  );\n}\n\nexport default App;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}