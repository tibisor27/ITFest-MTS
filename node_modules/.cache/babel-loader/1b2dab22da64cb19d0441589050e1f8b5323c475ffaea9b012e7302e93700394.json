{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\"\n  });\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddOrgan = async () => {\n    if (!donorAddress || account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donatorul poate mina NFT-uri!\");\n      return;\n    }\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Completează toate câmpurile!\");\n      return;\n    }\n    setLoading(true);\n    const nftData = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: \"Organ\",\n        value: formData.organ\n      }, {\n        trait_type: \"Blood Type\",\n        value: formData.bloodType\n      }]\n    };\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n    localStorage.setItem(\"lastNFT\", JSON.stringify(nftData));\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border rounded shadow-md w-80\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-2\",\n      children: \"Adaug\\u0103 un organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 64,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"organ\",\n      placeholder: \"Organ\",\n      onChange: handleChange,\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"bloodType\",\n      placeholder: \"Blood Type\",\n      onChange: handleChange,\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"description\",\n      placeholder: \"Description\",\n      onChange: handleChange,\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 67,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"image\",\n      placeholder: \"Image URL\",\n      onChange: handleChange,\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddOrgan,\n      disabled: loading,\n      className: \"bg-blue-500 text-white p-2 w-full rounded\",\n      children: loading ? \"Minting...\" : \"Add Organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 63,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"cp/M0H8xQ1+RB/ZdNd++AQZNa/o=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["useState","uploadToPinata","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","_s","loading","setLoading","formData","setFormData","organ","bloodType","description","image","handleChange","e","target","name","value","handleAddOrgan","toLowerCase","alert","nftData","id","Date","now","toString","attributes","trait_type","ipfsUrl","localStorage","setItem","JSON","stringify","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","placeholder","onChange","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { useState } from \"react\";\nimport { uploadToPinata } from \"../utils/pinata\";\n\nexport default function AddOrgan({ organNFT, provider, account, donorAddress }) {\n  const [loading, setLoading] = useState(false);\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\",\n  });\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress || account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donatorul poate mina NFT-uri!\");\n      return;\n    }\n\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Completează toate câmpurile!\");\n      return;\n    }\n\n    setLoading(true);\n\n    const nftData = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: \"Organ\", value: formData.organ },\n        { trait_type: \"Blood Type\", value: formData.bloodType },\n      ],\n    };\n\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n\n    localStorage.setItem(\"lastNFT\", JSON.stringify(nftData));\n\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT mintat cu succes!\");\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"p-4 border rounded shadow-md w-80\">\n      <h2 className=\"text-xl font-bold mb-2\">Adaugă un organ</h2>\n      <input name=\"organ\" placeholder=\"Organ\" onChange={handleChange} className=\"border p-2 w-full mb-2\" />\n      <input name=\"bloodType\" placeholder=\"Blood Type\" onChange={handleChange} className=\"border p-2 w-full mb-2\" />\n      <input name=\"description\" placeholder=\"Description\" onChange={handleChange} className=\"border p-2 w-full mb-2\" />\n      <input name=\"image\" placeholder=\"Image URL\" onChange={handleChange} className=\"border p-2 w-full mb-2\" />\n      <button onClick={handleAddOrgan} disabled={loading} className=\"bg-blue-500 text-white p-2 w-full rounded\">\n        {loading ? \"Minting...\" : \"Add Organ\"}\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}