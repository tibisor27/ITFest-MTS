{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress,\n  reloadData\n}) {\n  _s();\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [organData, setOrganData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\"\n  });\n\n  // 📝 Actualizăm datele când utilizatorul scrie în formular\n  const handleChange = e => {\n    setOrganData({\n      ...organData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert(\"Donor address not found!\");\n      return;\n    }\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt inițializate!\");\n      return;\n    }\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n    setLoading(true);\n    const nftData = {\n      ...organData,\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: \"Donor\",\n        value: account\n      }, {\n        trait_type: \"Organ\",\n        value: organData.organ\n      }, {\n        trait_type: \"Blood Type\",\n        value: organData.bloodType\n      }]\n    };\n\n    // 🔗 Încărcăm metadata pe IPFS\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n\n      // 🔥 Mint NFT ca donor\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT mintat cu succes!\");\n      reloadData(); // Actualizăm UI\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n    setLoading(false);\n    setShowForm(false); // Închidem formularul după minting\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: () => setShowForm(true),\n      className: \"bg-blue-500 text-white p-2 rounded-md mt-3\",\n      children: \"Add Organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), showForm && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"bg-white p-5 rounded-lg shadow-lg w-[400px]\",\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"text-xl font-bold mb-4\",\n          children: \"Completeaz\\u0103 detaliile organului\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"organ\",\n          placeholder: \"Organ (ex: Rinichi)\",\n          className: \"w-full p-2 border rounded mb-2\",\n          value: organData.organ,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"bloodType\",\n          placeholder: \"Blood Type (ex: A+)\",\n          className: \"w-full p-2 border rounded mb-2\",\n          value: organData.bloodType,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          name: \"description\",\n          placeholder: \"Descriere\",\n          className: \"w-full p-2 border rounded mb-2\",\n          value: organData.description,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 107,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          name: \"image\",\n          placeholder: \"Image URL (optional)\",\n          className: \"w-full p-2 border rounded mb-2\",\n          value: organData.image,\n          onChange: handleChange\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"flex justify-between\",\n          children: [/*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: () => setShowForm(false),\n            className: \"bg-gray-500 text-white p-2 rounded\",\n            children: \"Anuleaz\\u0103\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 125,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n            onClick: handleAddOrgan,\n            className: \"bg-green-500 text-white p-2 rounded\",\n            children: loading ? \"Minting...\" : \"Confirmă\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 131,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 76,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"7g7W7SHHoXDrAZlMJ5n7y8H/YBo=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["uploadToPinata","useState","ethers","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","reloadData","_s","loading","setLoading","showForm","setShowForm","organData","setOrganData","organ","bloodType","description","image","handleChange","e","target","name","value","handleAddOrgan","alert","toLowerCase","nftData","id","Date","now","toString","attributes","trait_type","ipfsUrl","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","error","console","children","onClick","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { uploadToPinata } from \"../utils/pinata\";\nimport { useState } from \"react\";\nimport { ethers } from \"ethers\";\n\nexport default function AddOrgan({ organNFT, provider, account, donorAddress, reloadData }) {\n  const [loading, setLoading] = useState(false);\n  const [showForm, setShowForm] = useState(false);\n  const [organData, setOrganData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\",\n  });\n\n  // 📝 Actualizăm datele când utilizatorul scrie în formular\n  const handleChange = (e) => {\n    setOrganData({ ...organData, [e.target.name]: e.target.value });\n  };\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress) {\n      alert(\"Donor address not found!\");\n      return;\n    }\n\n    if (!organNFT || !provider || !account || !donorAddress) {\n      alert(\"Contractul sau wallet-ul nu sunt inițializate!\");\n      return;\n    }\n\n    if (account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Numai donor-ul poate mina NFT-uri!\");\n      return;\n    }\n\n    setLoading(true);\n\n    const nftData = {\n      ...organData,\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: \"Donor\", value: account },\n        { trait_type: \"Organ\", value: organData.organ },\n        { trait_type: \"Blood Type\", value: organData.bloodType },\n      ],\n    };\n\n    // 🔗 Încărcăm metadata pe IPFS\n    const ipfsUrl = await uploadToPinata(nftData);\n    if (!ipfsUrl) {\n      alert(\"Eroare la încărcare pe IPFS!\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n\n      // 🔥 Mint NFT ca donor\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n\n      alert(\"NFT mintat cu succes!\");\n      reloadData(); // Actualizăm UI\n    } catch (error) {\n      console.error(\"Eroare la minting:\", error);\n      alert(\"Minting failed!\");\n    }\n\n    setLoading(false);\n    setShowForm(false); // Închidem formularul după minting\n  };\n\n  return (\n    <div>\n      <button\n        onClick={() => setShowForm(true)}\n        className=\"bg-blue-500 text-white p-2 rounded-md mt-3\"\n      >\n        Add Organ\n      </button>\n\n      {showForm && (\n        <div className=\"fixed inset-0 flex items-center justify-center bg-gray-800 bg-opacity-75\">\n          <div className=\"bg-white p-5 rounded-lg shadow-lg w-[400px]\">\n            <h2 className=\"text-xl font-bold mb-4\">Completează detaliile organului</h2>\n            \n            <input\n              type=\"text\"\n              name=\"organ\"\n              placeholder=\"Organ (ex: Rinichi)\"\n              className=\"w-full p-2 border rounded mb-2\"\n              value={organData.organ}\n              onChange={handleChange}\n            />\n            \n            <input\n              type=\"text\"\n              name=\"bloodType\"\n              placeholder=\"Blood Type (ex: A+)\"\n              className=\"w-full p-2 border rounded mb-2\"\n              value={organData.bloodType}\n              onChange={handleChange}\n            />\n\n            <textarea\n              name=\"description\"\n              placeholder=\"Descriere\"\n              className=\"w-full p-2 border rounded mb-2\"\n              value={organData.description}\n              onChange={handleChange}\n            />\n\n            <input\n              type=\"text\"\n              name=\"image\"\n              placeholder=\"Image URL (optional)\"\n              className=\"w-full p-2 border rounded mb-2\"\n              value={organData.image}\n              onChange={handleChange}\n            />\n\n            <div className=\"flex justify-between\">\n              <button\n                onClick={() => setShowForm(false)}\n                className=\"bg-gray-500 text-white p-2 rounded\"\n              >\n                Anulează\n              </button>\n              <button\n                onClick={handleAddOrgan}\n                className=\"bg-green-500 text-white p-2 rounded\"\n              >\n                {loading ? \"Minting...\" : \"Confirmă\"}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}