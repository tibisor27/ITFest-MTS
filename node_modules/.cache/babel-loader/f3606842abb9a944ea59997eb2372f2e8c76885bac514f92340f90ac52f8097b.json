{"ast":null,"code":"var _jsxFileName = \"/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js\",\n  _s = $RefreshSig$();\nimport { useState } from \"react\";\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { ethers } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddOrgan({\n  organNFT,\n  provider,\n  account,\n  donorAddress,\n  fetchDetails\n}) {\n  _s();\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\"\n  });\n  const [loading, setLoading] = useState(false);\n  const handleChange = e => {\n    setFormData({\n      ...formData,\n      [e.target.name]: e.target.value\n    });\n  };\n  const handleFileUpload = async e => {\n    const file = e.target.files[0];\n    if (!file) return;\n    setLoading(true);\n    const imageUrl = await uploadToPinata(file);\n    if (imageUrl) {\n      setFormData({\n        ...formData,\n        image: imageUrl\n      });\n    }\n    setLoading(false);\n  };\n  const handleAddOrgan = async () => {\n    if (!donorAddress || account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Only the donor can create an organ NFT!\");\n      return;\n    }\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Please fill all fields!\");\n      return;\n    }\n    setLoading(true);\n    const nftMetadata = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [{\n        trait_type: \"Organ\",\n        value: formData.organ\n      }, {\n        trait_type: \"Blood Type\",\n        value: formData.bloodType\n      }]\n    };\n    const ipfsUrl = await uploadToPinata(nftMetadata);\n    if (!ipfsUrl) {\n      alert(\"Error uploading to IPFS!\");\n      setLoading(false);\n      return;\n    }\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT successfully minted!\");\n      fetchDetails();\n    } catch (error) {\n      console.error(\"Minting error:\", error);\n      alert(\"Minting failed!\");\n    }\n    setLoading(false);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"p-4 border rounded shadow-md\",\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-xl font-bold mb-3\",\n      children: \"Add Organ\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"organ\",\n      value: formData.organ,\n      onChange: handleChange,\n      placeholder: \"Organ Type\",\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"bloodType\",\n      value: formData.bloodType,\n      onChange: handleChange,\n      placeholder: \"Blood Type\",\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      name: \"description\",\n      value: formData.description,\n      onChange: handleChange,\n      placeholder: \"Description\",\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"file\",\n      onChange: handleFileUpload,\n      className: \"border p-2 w-full mb-2\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: handleAddOrgan,\n      disabled: loading,\n      className: \"bg-blue-500 text-white p-2 rounded-md w-full\",\n      children: loading ? \"Minting...\" : \"Mint NFT\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 5\n  }, this);\n}\n_s(AddOrgan, \"FNpGvnMJPgY0No56Tdhpk653aiQ=\");\n_c = AddOrgan;\nvar _c;\n$RefreshReg$(_c, \"AddOrgan\");","map":{"version":3,"names":["useState","uploadToPinata","ethers","jsxDEV","_jsxDEV","AddOrgan","organNFT","provider","account","donorAddress","fetchDetails","_s","formData","setFormData","organ","bloodType","description","image","loading","setLoading","handleChange","e","target","name","value","handleFileUpload","file","files","imageUrl","handleAddOrgan","toLowerCase","alert","nftMetadata","id","Date","now","toString","attributes","trait_type","ipfsUrl","signer","getSigner","organNFTWithSigner","connect","mintTx","mintOrganNFT","wait","error","console","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onChange","placeholder","type","onClick","disabled","_c","$RefreshReg$"],"sources":["/Users/sebyboiciuc/Desktop/ITFest-MTS/src/components/AddOrgan.js"],"sourcesContent":["import { useState } from \"react\";\nimport { uploadToPinata } from \"../utils/pinata\";\nimport { ethers } from \"ethers\";\n\nexport default function AddOrgan({ organNFT, provider, account, donorAddress, fetchDetails }) {\n  const [formData, setFormData] = useState({\n    organ: \"\",\n    bloodType: \"\",\n    description: \"\",\n    image: \"\",\n  });\n  const [loading, setLoading] = useState(false);\n\n  const handleChange = (e) => {\n    setFormData({ ...formData, [e.target.name]: e.target.value });\n  };\n\n  const handleFileUpload = async (e) => {\n    const file = e.target.files[0];\n    if (!file) return;\n\n    setLoading(true);\n    const imageUrl = await uploadToPinata(file);\n    if (imageUrl) {\n      setFormData({ ...formData, image: imageUrl });\n    }\n    setLoading(false);\n  };\n\n  const handleAddOrgan = async () => {\n    if (!donorAddress || account.toLowerCase() !== donorAddress.toLowerCase()) {\n      alert(\"Only the donor can create an organ NFT!\");\n      return;\n    }\n\n    if (!formData.organ || !formData.bloodType || !formData.description || !formData.image) {\n      alert(\"Please fill all fields!\");\n      return;\n    }\n\n    setLoading(true);\n\n    const nftMetadata = {\n      ...formData,\n      id: Date.now().toString(),\n      attributes: [\n        { trait_type: \"Organ\", value: formData.organ },\n        { trait_type: \"Blood Type\", value: formData.bloodType },\n      ],\n    };\n\n    const ipfsUrl = await uploadToPinata(nftMetadata);\n    if (!ipfsUrl) {\n      alert(\"Error uploading to IPFS!\");\n      setLoading(false);\n      return;\n    }\n\n    try {\n      const signer = provider.getSigner();\n      const organNFTWithSigner = organNFT.connect(signer);\n      const mintTx = await organNFTWithSigner.mintOrganNFT(ipfsUrl);\n      await mintTx.wait();\n      alert(\"NFT successfully minted!\");\n      fetchDetails();\n    } catch (error) {\n      console.error(\"Minting error:\", error);\n      alert(\"Minting failed!\");\n    }\n\n    setLoading(false);\n  };\n\n  return (\n    <div className=\"p-4 border rounded shadow-md\">\n      <h2 className=\"text-xl font-bold mb-3\">Add Organ</h2>\n      <input name=\"organ\" value={formData.organ} onChange={handleChange} placeholder=\"Organ Type\" className=\"border p-2 w-full mb-2\" />\n      <input name=\"bloodType\" value={formData.bloodType} onChange={handleChange} placeholder=\"Blood Type\" className=\"border p-2 w-full mb-2\" />\n      <input name=\"description\" value={formData.description} onChange={handleChange} placeholder=\"Description\" className=\"border p-2 w-full mb-2\" />\n      <input type=\"file\" onChange={handleFileUpload} className=\"border p-2 w-full mb-2\" />\n      <button onClick={handleAddOrgan} disabled={loading} className=\"bg-blue-500 text-white p-2 rounded-md w-full\">\n        {loading ? \"Minting...\" : \"Mint NFT\"}\n      </button>\n    </div>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}